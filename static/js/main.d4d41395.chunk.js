(this["webpackJsonpdhis2-importer"]=this["webpackJsonpdhis2-importer"]||[]).push([[2],{124:function(e,n,t){"use strict";t.d(n,"a",(function(){return s}));t(0);var a=t(210),i=t(4);function r(e){return"string"==typeof e}function s({value:e}){if(void 0===e||null===e)return"";if("function"==typeof e)return"can't render functions";if(r(e)&&(e.startsWith("http://")||e.startsWith("https://")))return Object(i.jsxs)("a",{href:e,target:"_blank",rel:"noopener noreferrer",children:[e.slice(0,100),"..."]});if(r(e)&&e.length>100)return Object(i.jsxs)("span",{title:e,children:[e.slice(0,100),"..."]});const n=function(e){return"number"==typeof e||r(e)||"boolean"==typeof e}(e)?function(e){return"boolean"==typeof e}(e)?e.toString():e:JSON.stringify(e,(()=>{const e=new WeakSet;return(n,t)=>{if("object"===typeof t&&null!==t){if(e.has(t))return;e.add(t)}return t}})(),2);return Object(i.jsx)(a.a,{children:n})}},210:function(e,n,t){"use strict";var a=t(0),i=t(4);class r extends a.Component{constructor(e){super(e),this.state={hasError:!1}}static getDerivedStateFromError(e){return{hasError:!0}}componentDidCatch(e,n){console.log(e,n),this.setState({error:e,info:n})}render(){return this.state.hasError?Object(i.jsxs)("span",{children:["Something went wrong. ",this.state.info]}):this.props.children}}n.a=r},235:function(e,n,t){"use strict";t.r(n);var a=t(16),i=t.n(a);i.a.downloadFile=function({data:e,fileName:n,fileType:t}){const a=new Blob([e],{type:t}),i=document.createElement("a");i.download=n,i.href=window.URL.createObjectURL(a),i.click(),i.remove()},i.a.flattenObject=function e(n,t=[],a="",r={},s=!0){if(i.a.isString(n)||i.a.isNumber(n)||i.a.isBoolean(n)||s&&i.a.isNull(n))return r[a]=n,r;if(t.includes(a))return r[a]=n,r;if(i.a.isArray(n)||i.a.isPlainObject(n)){for(let o in n){let l=a;i.a.isArray(n)?l+=`[${o}]`:l=i.a.isEmpty(a)?o:a+"-"+o,e(n[o],t,l,r,s)}return r}return r},i.a.flattenObjects=(e,n)=>e.map((e=>i.a.flattenObject(e,n))),i.a.copyToClipBoard=e=>{void 0!=navigator.clipboard?navigator.clipboard.writeText(e).then((()=>{}),(e=>{console.error("Async: Could not copy text: ",e)})):window.clipboardData&&window.clipboardData.setData("Text",e)},i.a.renameColumns=(e,n)=>e.map((e=>i.a.mapKeys(e,((e,t)=>n[t]||t)))),i.a.reorderColumns=(e,n)=>e.map((e=>{const t={};return n.forEach((n=>t[n]=e[n])),t})),n.default=i.a},273:function(e,n,t){},511:function(e,n,t){"use strict";(function(e,t){class a{constructor(){const n="object"===typeof navigator&&"ReactNative"===navigator.product,a="object"===typeof e&&!0,i="object"===typeof window,r="function"===typeof importScripts;if(n)this.env=t;else if(r)this.env=this;else if(i)this.env=window;else{if(!a)throw new Error("Unsupported environment for fetch-intercept");this.env=t}this.fetch=this.env.fetch}static register(e={}){if(this._instance)return this._instance;const n=new this;for(let t=0;t<this.hooks.length;t++){const a=this.hooks[t];"function"===typeof e[a]&&(n[a]=e[a])}return n.hijack(),this._instance=n,n}unregister(){this.env.fetch=this.fetch,delete this.constructor._instance}hijack(){const e=new AbortController,n=e.signal;this.env.fetch=(...t)=>{let a;if(t[0]instanceof Request){let e={};["cache","context","credentials","destination","headers","integrity","method","mode","redirect","referrer","referrerPolicy","url","body","bodyUsed"].forEach((n=>{n in t[0]&&(e[n]=t[0][n])})),e.signal=n;const{url:i,...r}=e;a=new Request(i,r)}else{const e=t[0],i={...t[1],signal:n};a=new Request(e,i)}"function"===typeof this.onBeforeRequest&&this.onBeforeRequest(a,e);const i=this.fetch.call(this.env,a);return"function"===typeof this.onAfterRequest&&this.onAfterRequest(a,e),i.then((n=>(n.ok?"function"===typeof this.onRequestSuccess&&this.onRequestSuccess(n,a,e):"function"===typeof this.onRequestFailure&&this.onRequestFailure(n,a,e),n)))}}}a.hooks=["onBeforeRequest","onRequestSuccess","onRequestFailure"],n.a=a}).call(this,t(56),t(23))},583:function(e,n,t){},755:function(e,n){},757:function(e,n){},759:function(e,n){},789:function(e,n){},790:function(e,n){},848:function(e,n,t){"use strict";t.r(n);var a=t(0),i=t.n(a),r=t(15),s=t.n(r),o=(t(583),t(273),t(33)),l=t(391),d=t(883),c=t(414),u=t(888),p=t(114),m=t(392),g=t(113),h=t(211),f=t(98),y=t(208),b=t(878),v=t(880),j=t(879),O=t(301),S=t(523),w=t(302),x=t(303),E=t.n(x),_=t(223),C=t.n(_),A=t(506),I=t.n(A),k=t(877);var T=[{id:"D5a1DVMw7F1",name:"empty",editable:!0,code:'\n    const api = await dhis2.api();\n    const ou = await api.get("organisationUnits", {\n      fields: "id,name,ancestors[id,name],geometry"\n    });\n\n    return _.flattenObjects(ou.organisationUnits, ["geometry"]);\n      '},{id:"loadtest456",name:"Load test map and results",editable:!0,code:'\n    const api = await dhis2.api();\n    const ou = await api.get("organisationUnits", {\n      fields: "id,name,ancestors[id,name],geometry",\n      paging: false\n    });\n    \n    const points = _.flattenObjects(ou.organisationUnits, ["geometry"]);\n    for (var i = 0; i < 10000; i++) {\n      points.push({\n        name: "demo " + i,\n        geometry: {\n          type: "Point",\n          coordinates: [\n            -12 + 1 * Math.random() * Math.sin(i),\n            8.5 + 1 * Math.cos(i)\n          ]\n        }\n      });\n    }\n    \n    return points;\n       \n      '},{id:"loadtest452",name:"Show everything",editable:!0,code:'\n// press crtl-r to run\nconst api = await dhis2.api();\nconst ou = await api.get("organisationUnits", {\nfields: "id,name,geometry",\npaging: false\n});\n\n/**\n * @param numOfSteps: Total number steps to get color, means total colors\n * @param step: The step number, means the order of the color\n */\nfunction rainbow(numOfSteps, step) {\n  // This function generates vibrant, "evenly spaced" colours (i.e. no clustering). This is ideal for creating easily distinguishable vibrant markers in Google Maps and other apps.\n  // Adam Cole, 2011-Sept-14\n  // HSV to RBG adapted from: http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript\n  var r, g, b;\n  var h = step / numOfSteps;\n  var i = ~~(h * 6);\n  var f = h * 6 - i;\n  var q = 1 - f;\n  switch (i % 6) {\n    case 0:\n      r = 1;\n      g = f;\n      b = 0;\n      break;\n    case 1:\n      r = q;\n      g = 1;\n      b = 0;\n      break;\n    case 2:\n      r = 0;\n      g = 1;\n      b = f;\n      break;\n    case 3:\n      r = 0;\n      g = q;\n      b = 1;\n      break;\n    case 4:\n      r = f;\n      g = 0;\n      b = 1;\n      break;\n    case 5:\n      r = 1;\n      g = 0;\n      b = q;\n      break;\n  }\n  var c =\n    "#" +\n    ("00" + (~~(r * 255)).toString(16)).slice(-2) +\n    ("00" + (~~(g * 255)).toString(16)).slice(-2) +\n    ("00" + (~~(b * 255)).toString(16)).slice(-2);\n  return c;\n}\nlet index = 1;\nfor (o of ou.organisationUnits) {\n  o.color = rainbow(100, index % 100);\n  index = index + 1;\n}\nreturn ou.organisationUnits\n'},{id:"lD3mlYe0S0X",name:"Basic - Access api",code:'\n  const api = await dhis2.api();\n  const ou = await api.get("organisationUnits", {\n    fields: "id,name",\n    paging: false\n  });\n  return ou.organisationUnits\n      '},{id:"u2Rzyn9ZvfD",name:"Basic - List of orgunits with ancestors and groups",editable:!1,code:'\n\n  const api = await dhis2.api();\n  const organisationUnitsResp = await api.get("organisationUnits", {\n    fields: "id,name,ancestors[id,name],organisationUnitGroups[id,name]",\n    paging: false\n  });\n  const organisationUnits =  organisationUnitsResp.organisationUnits.map(ou => {\n      return {\n          id: ou.id,\n          name: ou.name,\n          level0: ou.ancestors[0] && ou.ancestors[0].name,\n          level1: ou.ancestors[1] && ou.ancestors[1].name,\n          level2: ou.ancestors[2] && ou.ancestors[2].name,\n          level3: ou.ancestors[3] && ou.ancestors[3].name,\n          level4: ou.ancestors[4] && ou.ancestors[4].name,\n          groups: ou.organisationUnitGroups.map(g => g.name).sort().join(", ")\n      };\n  });\n  return organisationUnits\n  '},{id:"noCPOHibwHt",name:"Basic - List all available resources",code:"\nconst api = await dhis2.api();\n\nconst resources = await api.get(\"resources\")\nreturn resources.resources.map( r => {\n    return {\n        name: r.displayName,\n        snippet: 'const '+r.plural+'Resp = await api.get(\"'+r.plural+'\")'\n    }\n})\n\n    "},{id:"RWYYgYTGumd",name:"Users - Super user, inactive user, never logged in audit",editable:!0,code:'\n    const api = await dhis2.api();\n\n    const userResp = await api.get("users", {\n      fields:\n        "id,name,email,userCredentials[userRoles[id,name],lastLogin],organisationUnits[id,name,level],created",\n      filter: "userCredentials.disabled:eq:false",\n      paging: false\n    });\n    const users = userResp.users\n      .map(user => {\n        return {\n          id: user.id,\n          name: user.name,\n          email: user.email,\n          superuser: user.userCredentials.userRoles.some(role =>\n            ["Superuser", "Administrateur Principal"].includes(role["name"])\n          )\n            ? "true"\n            : "",\n          manageOrganisationUnits: user.organisationUnits\n            .map(ou => ou.name)\n            .join(", "),\n          roles: user.userCredentials.userRoles.map(r => r.name).join(", "),\n          created: user.created,\n          lastLogin: user.userCredentials.lastLogin\n        };\n      })\n      .sort((a, b) => (a.superuser ? -1 : b.super_user ? -1 : 1));\n\n    const date = new Date();\n    const newDate = new Date(date.setMonth(date.getMonth() - 6));\n    const loginDate =  date.toJSON().substring(0, 7)\n\n    report.register("superusers", users.filter(u => u.superuser));\n    report.register("created_notloggedin", users.filter(u => u.lastLogin == undefined));\n    report.register("oldLastLogin", users.filter(u => u.lastLogin && u.lastLogin <= loginDate ));\n    report.register("users", users);\n\n    return "";\n\n\n  ',report:'\n# Admin users\n\nLimit the admin users to a small number\n\n[DataTable data:superusers label:"Admin users" perPage:50/]\n\n# Users created but never logged in\n\nUser created but that never logged in. If they were created long time a ago, it\'s probably safer to disable them.\n\n[DataTable data:created_notloggedin label:"Created but never logged in" perPage:20/]\n\n# Last login more than 6 months\n\nThese users didn\'t logged in since a while. It\'s probably safer to disable them.\n\n[DataTable data:oldLastLogin label:"Login more than 6 months" perPage:20/]\n\n# All enabled users\n\nYou might want to audit the roles and orgunits of existing users\n\n[DataTable data:users label:"All users" perPage:20/]\n\n\n'},{id:"bifaoG4Ky23",name:"Coordinates - Investigate GEOJSON data quality",editable:!1,code:'\n      const api = await dhis2.api();\n      const ou = await api.get("organisationUnits", {\n        fields: "id,name,coordinates,featureType",\n        paging: false\n      });\n      ou.organisationUnits.forEach(ou => {\n        ou.guessedFeatureType =\n          ou.coordinates === undefined\n            ? "NONE"\n            : ou.coordinates.startsWith("[[[[")\n            ? "MULTI_POLYGON"\n            : ou.coordinates.startsWith("[[[")\n            ? "POLYGON"\n            : ou.coordinates.startsWith("[[")\n            ? "LINE"\n            : ou.coordinates.startsWith("[")\n            ? "POINT"\n            : "NONE";\n\n        ou.featureTypeMatches = ou.guessedFeatureType === ou.featureType;\n      });\n      return ou.organisationUnits.filter(ou => ou.featureTypeMatches == false);\n    '},{id:"d4pmpo12iMp",name:"Coordinates - coordinates stats per level",editable:!0,code:'\n    const stats = [];\n    const api = await dhis2.api();\n\n    const levels = await api.get("organisationUnitLevels", {\n      fields: "id,name,level",\n      order: "level"\n    });\n\n    const system = await api.get("system/info");\n    const version = system.version;\n    const v = version.split(".");\n    const vfloat = parseFloat(v[0] + "." + v[1]);\n    const fieldCoordinates = vfloat >= 2.32 ? "geometry" : "coordinates";\n\n    for( let level of levels.organisationUnitLevels) {\n      const withCoordinates = await api.get("organisationUnits", {\n        fields: "id,name",\n        filter: ["level:eq:" + level.level, fieldCoordinates + ":!null"],\n        paging: true,\n        pageSize: 1\n      });\n      const withoutCoordinates = await api.get("organisationUnits", {\n        fields: "id,name",\n        filter: ["level:eq:" + level.level, fieldCoordinates + ":null"],\n        paging: true,\n        pageSize: 1\n      });\n\n      const allOus = await api.get("organisationUnits", {\n        fields: "id,name",\n        filter: ["level:eq:" + level.level],\n        paging: true,\n        pageSize: 1\n      });\n\n      stats.push({\n        levelName: level.name,\n        level: level.level,\n        withCoordinates: withCoordinates.pager.total,\n        withoutCoordinates: withoutCoordinates.pager.total,\n        totalOrganisationUnits: allOus.pager.total,\n        percentageCoordinates:\n          allOus.pager.total > 0\n            ? ((withCoordinates.pager.total / allOus.pager.total) * 100).toFixed(2)\n            : "-"\n      });\n      report.register("statsByLevel" + level.level, [\n        { x: "with", y: withCoordinates.pager.total },\n        { x: "without", y: withoutCoordinates.pager.total }\n      ]);\n    }\n\n    return stats;\n\n\n ',report:'\n\n [FlexBox]\n# Level 1\n[FlexBox]\n[Chart type:"pie" data:statsByLevel1 colorScale:`["green", "grey" ]` /]\n[AsJSON data:statsByLevel1 /]\n[/FlexBox]\n\n# Level 2\n[FlexBox]\n[Chart type:"pie" data:statsByLevel2 colorScale:`["green", "grey" ]` /]\n[AsJSON data:statsByLevel2 /]\n[/FlexBox]\n\n[/FlexBox]\n\n[FlexBox]\n# Level 3\n[FlexBox]\n[Chart type:"pie" data:statsByLevel3 colorScale:`["green", "grey" ]` /]\n[AsJSON data:statsByLevel3 /]\n[/FlexBox]\n\n# Level 4\n[FlexBox]\n[Chart type:"pie" data:statsByLevel4 colorScale:`["green", "grey" ]` /]\n[AsJSON data:statsByLevel4 /]\n[/FlexBox]\n[/FlexBox]\n   '},{id:"D5a1DVMw7FV",name:"List data elements that aren't linked to program stages or datasets",editable:!0,code:'\n    const api = await dhis2.api();\n    const de = await api.get("dataElements", {\n    fields: "id,name,href,domainType",\n    filter: "dataSetElements:empty",\n    paging: false\n    });\n\n\n    const programResp = await api.get("programStages", {\n        fields: "programStageDataElements[dataElement[id]]",\n        paging: false\n    })\n\n    const usedByPrograms = new Set(programResp.programStages.flatMap(ps=> ps.programStageDataElements.map(psde => psde.dataElement.id)))\n\n    return de.dataElements.filter( de => !usedByPrograms.has(de.id))\n'},{id:"YuQRTavdpGE",name:"Show orgunits with a level 2 org unit on map",editable:!0,code:'\n    const api = await dhis2.api();\nconst parent = await api.get("organisationUnits", {\n  fields: "id,name,coordinates,geometry",\n  filter: "level:eq:2",\n  pageSize: 2\n});\nconst ou = await api.get("organisationUnits", {\n  fields: "id,name,coordinates,featureType,geometry,path",\n  filter: "path:ilike:" + parent.organisationUnits[0].id,\n  paging: false\n});\nreturn ou.organisationUnits;\n'},{id:"a0d79dd5c59",name:"Play - display events and map",editable:!0,code:'\n      const api = await dhis2.api();\n\n      const ev = await api.get("events", {\n        program: "VBqh0ynB2wv",\n        pageSize: 100\n      });\n\n      return ev.events;\n\n        '},{id:"af2fd38f351",name:"Play - Periods",editable:!0,code:'\nconst periods = ["2019", "2019S1", "2019Q3", "201907"];\nconst frequencies = [\n  "monthly",\n  "quarterly",\n  "yearly",\n  "sixMonthly",\n  "financialJuly"\n];\nconst results = [];\nperiods.forEach(period => {\n  frequencies.forEach(frequency => {\n    results.push(\n      [period, frequency].concat(DatePeriods.split(period, frequency))\n    );\n  });\n});\n\nreturn results;\n\n    '},{id:"af2fd38f350",name:"Play - display event values and map",editable:!0,code:'\n      const api = await dhis2.api();\n      const de = await api.get("dataElements", {\n        fields: "id,name",\n        filter: "domainType:eq:TRACKER",\n        paging: false\n      });\n      const dataElementsById = {};\n      de.dataElements.forEach(de => (dataElementsById[de.id] = de.name));\n      const ev = await api.get("events", {\n        program: "VBqh0ynB2wv",\n        pageSize: 100\n      });\n      const events = ev.events.map(event => {\n        r = { id: event.event, coordinate: event.coordinate };\n\n        event.dataValues.forEach(\n          dataValue => (r[dataElementsById[dataValue.dataElement]] = dataValue.value)\n        );\n\n        r.color = r["Gender"] == "Male" ? "blue" : "red";\n        return r;\n      });\n\n      return events;\n\n\n        '},{id:"dy1a1mseGR7",name:"Play - indicators using a given data element",editable:!0,code:'\n    const api = await dhis2.api();\n    const dataElementId = "fbfJHSPpUQD";\n    const ind = await api.get("indicators", {\n      filter: "numerator:token:" + dataElementId,\n      fields:\n        "id,name,numerator,denominator,numeratorDescription,denominatorDescription",\n      paging: false\n    });\n    const ind2 = await api.get("indicators", {\n      filter: "denominator:token:" + dataElementId,\n      fields:\n        "id,name,numerator,denominator,numeratorDescription,denominatorDescription",\n      paging: false\n    });\n    return _.uniqBy(ind.indicators.concat(ind2.indicators), i => i.id);\n    '},{id:"ToQVD4irW3Q",name:"Play - programIndicators using a given tracker data element",editable:!0,code:'\n    const api = await dhis2.api();\nconst dataElementId = "Zj7UnCAulEk";\nconst ind = await api.get("programIndicators", {\n  filter: "expression:token:" + dataElementId,\n  fields: "id,name,expression,filter,description",\n  paging: false\n});\nconst ind2 = await api.get("programIndicators", {\n  filter: "filter:token:" + dataElementId,\n  fields: "id,name,expression,filter,description",\n  paging: false\n});\nreturn _.uniqBy(\n  ind.programIndicators.concat(ind2.programIndicators),\n  i => i.id\n);\n\n'},{id:"r6JQgt6y8Dn",name:"Play - fetch values for a period and display them on a map",editable:!0,code:'\n\n    const api = await dhis2.api();\n    const de = await api.get("dataElements", {\n      filter: "dataElementGroups.id:eq:qfxEYY9xAl6",\n      paging: false\n    });\n    const ou = await api.get("organisationUnits", {\n      paging: false,\n      fields: "id,name,geometry,coordinates"\n    });\n    const dataElementsById = _.keyBy(de.dataElements, de => de.id);\n    const organisationUnitsById = _.keyBy(ou.organisationUnits, ou => ou.id);\n    const dv = await api.get("dataValueSets", {\n      orgUnit: "ImspTQPwCqd",\n      children: true,\n      dataElementGroup: "qfxEYY9xAl6",\n      period: "201905"\n    });\n    dv.dataValues.forEach(dv => {\n      dv.dataElement = dataElementsById[dv.dataElement];\n      dv.orgUnit = organisationUnitsById[dv.orgUnit];\n      dv.geometry = organisationUnitsById[dv.orgUnit.id].geometry;\n      dv.color = dv.value == 9 ? "blue" : "red";\n    });\n    return dv.dataValues;\n    '},{id:"gbvX3pogf7p",name:"Generic - overview of category combos",editable:!0,code:'\n\n    // press crtl-r to run\nconst api = await dhis2.api();\nconst ccc = await api.get("categoryCombos", {\n  fields: "id,name,categories[name,categoryOptions[name]]",\n  paging: false\n});\nccc.categoryCombos.forEach(cc => {\n  cc.description = cc.categories\n    .map(\n      c => c.name + " [" + c.categoryOptions.map(o => o.name).join(", ") + "]"\n    )\n    .join(", ");\n  delete cc.categories;\n});\nreturn ccc.categoryCombos;\n'},{id:"turfds456az",name:"Turf - demo",editable:!0,code:'\n    var points = [\n      turf.point([29.3599, -3.3614], { name: "Bujumbura, Burundi" }),\n      turf.point([4.3517, 50.8503], { name: "Bruxelles, Belgium" }),\n      turf.point([2.3522, 48.8566], { name: "Paris, France" }),\n      turf.point([13.405, 52.52], { name: "Berlin, Germany" }),\n      turf.point([15.2663, -4.4419], { name: "Kinshasa, DRC" }),\n      turf.point([-14.4392276, 14.5001717], { name: "Senegal" }),\n      turf.point([31.0335, -17.8252], { name: "Harare, Zimbabwe" }),\n      turf.point([-5.8593, 43.3614], { name: "Asturias, Spain" }),\n      turf.point([2.3912, 6.3703], { name: "Cotonou, Benin" }),\n      turf.point([-77.0369, 38.9072], { name: "Washington DC, USA" }),\n      turf.point([3.406448, 6.465422], { name: "Busuyi (Lagos, Nigeria)" })\n    ];\n    points.sort((p1, p2) => turf.distance(p1, p2));\n    const polPoints = points\n      .map(p => p.geometry.coordinates)\n      .concat([points[0].geometry.coordinates]);\n    var line = turf.lineString([[0, 10], [20, 20]]);\n    var tin = turf.tin(turf.featureCollection(points), "z");\n    return points.concat([line]).concat(tin["features"]);\n'},{id:"turfds123az",name:"Turf - demo - geocoding, geojson",editable:!0,code:'\n    const data = [\n      { address: "4000 Glain, belgique" },\n      { address: "Chauss\xe9e de Tirlemont 45 5030 Gembloux" },\n      { address: "avenue de la Station 101-103 5030 Gembloux" },\n      { address: "Route de Hannut 181 5021 Boninne, belgique" },\n      { address: "Rue Lamarck, 57 4000 Li\xe8ge" },\n      { address: "rue du March\xe9 au beurre 25 6700 Arlon" }\n    ];\n    \u200b\n    const provinces = await fetch(\n      "https://mestachs.github.io/belgium/provinces.geo.json"\n    ).then(r => r.json());\n    \u200b\n    const communes = await fetch(\n      "https://mestachs.github.io/belgium/communes-be-2019.geojson"\n    ).then(r => r.json());\n    \u200b\n    for (record of data) {\n      const localisation = await fetch(\n        "https://nominatim.openstreetmap.org/search?q=" +\n          record.address +\n          "&format=json&polygon=1&addressdetails=1"\n      ).then(resp => resp.json());\n      if (localisation.length > 0) {\n        record.localisation = localisation[0];\n        record.coordinates = JSON.stringify([\n          parseFloat(localisation[0].lon),\n          parseFloat(localisation[0].lat)\n        ]);\n        turf.geometrify(record);\n      }\n    }\n    const matched_communes = communes.features.filter(commune =>\n      data.some(ou => ou.geometry && turf.inside(ou.geometry, commune))\n    );\n    const matched_provinces = provinces.features.filter(commune =>\n      data.some(ou => ou.geometry && turf.inside(ou.geometry, commune))\n    );\n    return data.concat(matched_provinces).concat(matched_communes);\n'},{id:"Yf6UHoPkdS6",name:"Play : update legendset colors",editable:!0,code:'\n    const api = await dhis2.api();\n    const lengendSetId = "Yf6UHoPkdS6";\n    const dryRun = true;\n    let legendSet = await api.get("legendSets/" + lengendSetId);\n    const colors = {\n      "30 - 40": "#d9f0az",\n      "40 - 50": "#addd50",\n      "50 - 60": "#41ab60"\n    };\n\n    Object.keys(colors).forEach(range => {\n      const legend = legendSet.legends.find(l => l.displayName == range);\n      legend.color = colors[range];\n    });\n    if (!dryRun) {\n      await api.update("legendSets/" + lengendSetId, legendSet);\n    }\n    legendSet = await api.get("legendSets/" + lengendSetId, {\n      fields: ":all"\n    });\n    return legendSet;\n\n'},{id:"aze123PkdS6",name:"Play : export orgunits with parent and groups",editable:!0,code:'\n  const api = await dhis2.api();\nconst ou = await api.get("organisationUnits", {\n  fields:\n    "id,name,coordinates,featureType,parent,organisationUnitGroups[id,name,groupSets[id]]",\n  paging: false\n});\nreturn ou.organisationUnits.map(ou => {\n  return {\n    id: ou.id,\n    name: ou.name,\n    coordinates: ou.coordinates,\n    featureType: ou.featureType,\n    parent: ou.parent ? ou.parent.id : undefined,\n    groups: ou.organisationUnitGroups.map(g => g.name).join(", ")\n  };\n});\n'},{id:"YlvBkdBjjVO",name:"Play : event counts",editable:!0,code:'\nconst api = await dhis2.api();\nconst pg = await api.get("programs", {\n  fields: "id,name,programStages[id,name]",\n  paging: false\n});\n\nconst results = [];\nfor (let program of pg.programs) {\n\n  try {\n    const ev = await api.get("events", {\n      program: program.id,\n      pageSize: 10,\n      totalPages: true\n    });\n    results.push({\n      id: program.id,\n\n      name: program.name,\n      events: ev.pager.total\n    });\n  } catch (ignore) {}\n}\n\nresults.push({\n  name: "TOTAL",\n  events: results.map(m => m.events).reduce((a, b) => a + b)\n});\nreturn results;\n'},{id:"YlvBkdBjaz5",name:"Play : CSV and fuse",editable:!0,code:'\n\n      const data = `\nline,name\n1,Adonkiia\n2,Afro Arabe Clinique\n      `;\n\n      const options = {\n        shouldSort: true,\n        includeScore: true,\n        threshold: 0.6,\n        location: 0,\n        distance: 100,\n        maxPatternLength: 32,\n        minMatchCharLength: 1,\n        keys: ["name"]\n      };\n\n      const api = await dhis2.api();\n      const ou = await api.get("organisationUnits", {\n        paging: false,\n        fields: "id,name"\n      });\n\n      const fuse = new Fuse(ou.organisationUnits, options); // "list" is the item array\n\n      let ouToMaps = PapaParse.parse(data.trim(), {\n        header: true\n      });\n\n      ouToMaps.data.forEach(ouToMap => {\n        ouToMap.mapping = fuse.search(ouToMap.name)[0];\n      });\n\n      return _.flattenObjects(ouToMaps.data);\n\n\n    '},{id:"UMHyEfFHCcr",name:"Simple event - Create event based on csv (not tracker)",editable:!0,params:[{id:"program",label:"Search",type:"dhis2",resourceName:"programs",default:"lxAQ7Zs9VYR"},{id:"mode",label:"Select run mode",type:"select",default:"generateEmptyCsv",choices:[["generateEmptyCsv","Generate an empty csv"],["dryRun","Import from csv - Dry run"],["import","Import from csv - import events"]]},{id:"file",label:"Pick csv with event values",type:"csv",helperText:"you can use 'Generate an empty csv' run mode to generate a template"}],code:'\n\n    const programId = parameters.program.id;\n\n    const dryRun = parameters.mode =="dryRun";\n    // press crtl-r to run\n    const api = await dhis2.api();\n    const pg = await api.get("programs/" + programId, {\n      fields:\n        "id,name,programStages[programStageDataElements[dataElement[id,name,valueType]]]"\n    });\n    const dataElementsByName = {};\n    pg.programStages\n      .flatMap(ps => ps.programStageDataElements)\n      .map(psde => psde.dataElement)\n      .forEach(de => (dataElementsByName[de.name] = de));\n\n    if (parameters.mode == "generateEmptyCsv") {\n      const result = {\n        id: "orgUnitId",\n        eventid:\n          "pre-generated event Id by https://play.dhis2.org/2.29/api/system/id?limit=3"\n      };\n      Object.keys(dataElementsByName).forEach(k => {\n        result[k] = "";\n      });\n      return [result];\n    }\n\n    const csv = parameters.file\n\n    function formatValue(value, de) {\n      if (de.valueType == "INTEGER_ZERO_OR_POSITIVE") {\n        return parseInt(value);\n      }\n      if (de.valueType == "BOOLEAN") {\n        return value === "Oui" || value === "1" ? true : false;\n      }\n      return value;\n    }\n\n    const events = csv.data.map(row => {\n      return {\n        program: programId,\n        event: row.eventid,\n        orgUnit: row.id,\n        eventDate: "2019-11-18T00:00:00.000",\n        status: "COMPLETED",\n        dataValues: Object.keys(dataElementsByName).map(column => {\n          return {\n            dataElement: dataElementsByName[column].id,\n            value: formatValue(row[column], dataElementsByName[column])\n          };\n        })\n      };\n    });\n\n    if (dryRun) {\n      return { events };\n    } else {\n      try {\n        const createResp = await api.post("events", { events });\n        return createResp;\n      } catch (except) {\n        return except;\n      }\n    }\n\n    '},{id:"UMHyEfFHXLS",name:"XlsxPopulate - Create a workbook from js",editable:!0,code:'\n\n    const workbook = await XlsxPopulate.fromBlankAsync();\n    const sheet = workbook.sheet(0);\n\n    sheet\n      .cell("A1")\n      .value("This was created in the browser!")\n      .style("fontColor", "ff0000");\n\n    const api = await dhis2.api();\n    const ou = await api.get("organisationUnits", {\n      fields: "id,name,ancestors[id,name]"\n    });\n    const r = sheet.cell("A2");\n    r.value(ou.organisationUnits.map(ou => [ou.id, ou.name]));\n    sheet.column("A").width(15);\n    sheet.column("B").width(30);\n    XlsxPopulate.openAsBlob(workbook, "orgunits.xslx");\n    return "a workbook will open shortly";\n    '},{id:"hV9ISZaPz2w",name:"Users - Create users from csv",editable:!0,params:[{id:"file",type:"csv",label:"Pick csv with event values"},{id:"mode",type:"select",label:"Select run mode",choices:[["dryRun","Import from csv - Dry run"],["import","Import from csv - create users"]],default:"dryRun"}],code:'\n\nconst rawData = `\nfirstName,surname,email,username,password,userRole,organisationUnits,dataViewOrganisationUnits\nJohn,Doe,johndoe@mail.com,johndoe123,Your-password-123,Data entry clerk,DHIS2OUID,DHIS2OUID\n`;\n\nconst api = await dhis2.api();\nconst dryRun = parameters.mode == "dryRun";\n\nconst ur = await api.get("userRoles", { fields: "id,name", paging: false });\nconst userRoles = {};\nur.userRoles.forEach(u => (userRoles[u.name] = u.id));\n\nconst users = parameters.file.data.filter(user => user.username);\n\nconst ids = (await api.get("system/id?limit=" + 2 * users.length))["codes"];\n\nlet index = 0;\ndhis2_users = users.map(user => {\n  const id1 = ids[index];\n  const id2 = ids[index + 1];\n  index = index + 2;\n  const dhis2user = {\n    id: id1,\n    firstName: user.firstName,\n    surname: user.surname,\n    email: user.email,\n    userCredentials: {\n      id: id2,\n      userInfo: {\n        id: id1\n      },\n      username: user.username,\n      password: user.password\n    },\n    organisationUnits: user.organisationUnits.split(",").map(id => {\n      return { id };\n    }),\n    dataViewOrganisationUnits: user.dataViewOrganisationUnits\n      .split(",")\n      .map(id => {\n        return { id };\n      })\n  };\n  dhis2user.userRoles = user.userRole.split(",").map(role => {\n    if (userRoles[role] == undefined) {\n      throw new Error(\n        "userRole not found : \'" +\n          role +\n          "\' known roles : " +\n          Object.keys(userRoles).join(" ,")\n      );\n    }\n    return { id: userRoles[role] };\n  });\n\n  dhis2user.userCredentials.userRoles = dhis2user.userRoles;\n  return dhis2user;\n});\nif (dryRun) {\n  return { dhis2_users };\n} else {\n  const resp = await api.post("metadata", { users: dhis2_users });\n  return resp;\n}\n\n\n    '},{id:"akBR3UIfpLB",name:"Play - Pameters show case",editable:!0,params:[{id:"program",label:"Search for program",type:"dhis2",resourceName:"programs",default:"sample"},{id:"datalementTracker",label:"Search for tracker data element",type:"dhis2",resourceName:"dataElements",filter:"domainType:eq:TRACKER"},{id:"datalementAggregate",label:"Search for aggregate data element",type:"dhis2",resourceName:"dataElements",filter:"domainType:eq:AGGREGATE"},{id:"mode",label:"Select run mode",type:"select",default:"generateEmptyCsv",choices:[["generateEmptyCsv","Generate an empty csv"],["dryRun","Import from csv - Dry run"],["import","Import from csv - import events"]]},{id:"file",label:"Pick csv with event values",type:"csv",helperText:"you can use 'Generate an empty csv' run mode to generate a template"}],code:"\n       return parameters\n    "},{id:"q1bKZe58btE",name:"Play - Mix orgunits and gadm",params:[{id:"orgunit",type:"dhis2",label:"Search for a zone",filter:"level:in:[1,2,3]",default:{name:"Badjia",id:"YuQRtpLP10I"},resourceName:"organisationUnits"},{id:"gadm_level",label:"GADM level",type:"select",default:"1",choices:[[0,"0"],[1,"1"],[2,"2"],[3,"3"]]}],code:'\n    // press crtl-r to run\n    const api = await dhis2.api();\n    const ou = await api.get("organisationUnits/" + parameters.orgunit.id, {\n      fields: "id,name,geometry"\n    });\n    ou.opacity = 0.7;\n    ou.color = "red";\n    ou.fillColor = "red";\n\n    const s3_url = "https://geojson-countries.s3-eu-west-1.amazonaws.com/";\n    const download = async file => {\n      return fetch(s3_url + file).then(f => f.json());\n    };\n    const gadm = await download("gadm36_SLE_"+parameters.gadm_level+".shp.geojson");\n\n    const results = [];\n\n    gadm["features"].forEach((f, index) => {\n      results.push(f);\n      f.name = f.properties.NAME_2;\n      f.color = "black";\n    });\n    results.push(ou);\n    return results;\n\n '},{id:"dHC94p8sbdE",name:"Dataviz - update custom attributes of program indicator",params:[{id:"programIndicator",type:"dhis2",resourceName:"programIndicators"},{id:"alternateName-fr",type:"text"},{id:"position",type:"text"},{id:"iconName",type:"text"},{id:"mode",label:"Select run mode",type:"select",default:"dryRun",choices:[["dryRun","Dry run"],["update","update"]]}],code:'\n\nconst api = await dhis2.api();\nconst pi = await api.get(\n  "programIndicators/" + parameters.programIndicator.id,\n  {\n    fields: ":all",\n    paging: false\n  }\n);\n\nconst values = {\n  "alternateName-fr": parameters["alternateName-fr"],\n  position: parameters["position"],\n  iconName: parameters["iconName"]\n};\n\nconst customAttributes = (await api.get("attributes",\n                            {\n                              fields:"id,name",\n                              filter: "programIndicatorAttribute:eq:true"\n                            })).attributes\nif (customAttributes.length == 0) {\n  alert("Sorry no custom attributes : "+Object.keys(values))\n  return\n}\ncustomAttributes.forEach(customAttribute => {\n  const currentVal = pi.attributeValues.find(\n    attribValue => attribValue.attribute.id == customAttribute.id\n  );\n  const newValue = values[customAttribute.name];\n  if (values[customAttribute.name]) {\n    if (currentVal) {\n      currentVal.value = newValue;\n    } else {\n      pi.attributeValues.push({\n        value: newValue,\n        attribute: { id: customAttribute.id }\n      });\n    }\n  }\n});\n\nconst dryRun = parameters.mode == "dryRun";\nif (dryRun) {\n  return pi;\n} else {\n  const updated = await api.update("programIndicators/" + pi.id, pi);\n  return updated;\n}\nreturn pi.attributeValues;\n\n\n'},{id:"YKPWywkbphl",name:"XLSForm - Generate a basic xlsform for a program",params:[{id:"program",type:"dhis2",resourceName:"programs"}],code:'\n    const api = await dhis2.api();\n    const pg = await api.get("programs/" + parameters.program.id + ".json", {\n      fields:\n        "id,name,trackedEntityType,programTrackedEntityAttributes[trackedEntityAttribute[id,generated,name,code,valueType,optionSet[id,name,code,options[id,code,name]]]],programStages[id,code,name,programStageSections[:all,id,name,code],programStageDataElements[compulsory,code,dataElement[id,name,formName,shortName,code,valueType,optionSet[id,code,name,options[code,name]]]]]",\n      paging: false\n    });\n\n    const iaso_mappings = {};\n\n    function toQuestion(valueType, optionSet, compulsory) {\n      let type = "";\n      let constraint = undefined;\n      let constraint_message = undefined;\n      let required = undefined;\n      let appearance = undefined;\n\n      if (compulsory == true) {\n        required = "true";\n      }\n\n      if (optionSet) {\n        type =\n          "select_one " +\n          (optionSet.code ||\n            slugify(optionSet.name) ||\n            slugify(optionSet.displayName));\n        appearance = "minimal";\n      } else if (valueType == "BOOLEAN" || valueType == "TRUE_ONLY") {\n        type = "select_one yesno";\n      } else if (valueType == "DATE") {\n        type = "date";\n      } else if (valueType == "TEXT" || valueType == "LONG_TEXT") {\n        type = "text";\n      } else if (valueType == "PERCENTAGE") {\n        type = "integer";\n      } else if (valueType == "INTEGER") {\n        type = "integer";\n      } else if (valueType == "INTEGER_POSITIVE") {\n        type = "integer";\n        constraint = ". > 0";\n        constraint_message = "must be non-zero positive number";\n      } else if (valueType == "INTEGER_ZERO_OR_POSITIVE") {\n        type = "integer";\n        constraint = ". >= 0";\n        constraint_message = "must be a positive number";\n      } else if (valueType == "INTEGER_ZERO_OR_NEGATIVE") {\n        type = "integer";\n        constraint = ". <= 0";\n        constraint_message = "must be a negative number";\n      } else if (valueType == "INTEGER_NEGATIVE") {\n        type = "integer";\n        constraint = ". < 0";\n        constraint_message = "must be non-zero negative number";\n      } else if (valueType == "NUMBER") {\n        type = "decimal";\n      } else if (valueType == "COORDINATE") {\n        type = "geopoint";\n      } else if (valueType == "EMAIL") {\n        type = "text";\n        constraint = "regex(., \'[A-Za-z0-9._%+-]+@[A-Za-z0-9-]+[.][A-Za-z]{2,10}\')";\n        constraint_message = "should be a email";\n      } else if (valueType == "PHONE_NUMBER") {\n        type = "text";\n        constraint = "regex(., \'[0-9._%+-]+[.]\')";\n        constraint_message = "should be a phone number";\n      } else if (valueType == "ORGANISATION_UNIT") {\n        type = "select_one orgunit";\n      } else if (valueType == "FILE_RESOURCE") {\n        type = "file";\n      } else if (valueType == "TIME") {\n        type = "time";\n      } else if (valueType == "AGE") {\n        type = "date";\n      } else {\n        throw Error("valueType not supported " + valueType);\n      }\n      return {\n        type: type,\n        constraint: constraint,\n        constraint_message: constraint_message,\n        required: required,\n        appearance: appearance\n      };\n    }\n\n    function slugify(string) {\n      if (string == undefined) {\n        return undefined;\n      }\n      string = string.normalize("NFD").replace(/[\u0300-\u036f]/g, "")\n\n      return string\n        .toString()\n        .toLowerCase()\n        .replace("(", "_")\n        .replace(")", "_")\n        .replace(/[\u2018\u2019]/g, "_")\n        .replace(/[\u201c\u201d]/g, "_")\n        .replace(/\\s+/g, "_") // Replace spaces with -\n        .replace(/&/g, "_and_") // Replace & with \'and\'\n        .replace(/[^[a-zA-Z0-9?-?]-]+/g, "") // Arabic support\n        .replace(/__+/g, "_") // Replace multiple - with single -\n        .replace(/^-+/, "") // Trim - from start of text\n        .replace(/_+$/, ""); // Trim - from end of text\n    }\n\n    const workbook = await XlsxPopulate.fromBlankAsync();\n    const sheet = workbook.sheet(0);\n    const questions = [\n      [\n        "type",\n        "name",\n        "label",\n        "required",\n        "choice_filter",\n        "constraint",\n        "constraint_message",\n        "relevant",\n        "hint",\n        "appearance",\n        "calculation"\n      ]\n    ];\n\n    function append_to_mappings(question_name, mapping) {\n      if (iaso_mappings[question_name] == undefined) {\n        iaso_mappings[question_name] = [];\n      }\n      iaso_mappings[question_name].push(mapping);\n    }\n\n    pg.programTrackedEntityAttributes.forEach(de => {\n      const question = toQuestion(\n        de.trackedEntityAttribute.valueType,\n        de.trackedEntityAttribute.optionSet,\n        de.compulsory\n      );\n      const question_name =\n        de.trackedEntityAttribute.code || slugify(de.trackedEntityAttribute.name);\n\n      append_to_mappings(question_name, de);\n\n      questions.push([\n        question.type,\n        question_name,\n        de.trackedEntityAttribute.formName || de.trackedEntityAttribute.name,\n        question.required,\n        undefined,\n        question.constraint,\n        question.constraint_message,\n        undefined,\n        undefined,\n        question.appearance\n      ]);\n    });\n\n    let stageIndex = 1;\n\n    pg.programStages.forEach(programStage => {\n      questions.push([\n        undefined,\n        undefined,\n        undefined,\n        undefined,\n        undefined,\n        undefined,\n        undefined\n      ]);\n      questions.push([\n        "begin group",\n        slugify(programStage.name),\n        programStage.name,\n        undefined,\n        undefined,\n        undefined,\n        undefined\n      ]);\n      let sectionIndex = 1;\n      if (programStage.programStageSections.length == 0) {\n        programStage.programStageSections.push({\n          dataElements: programStage.programStageDataElements.map(\n            psde => psde.dataElement\n          )\n        });\n      }\n\n      programStage.programStageSections.forEach(programStageSection => {\n        questions.push([\n          undefined,\n          undefined,\n          undefined,\n          undefined,\n          undefined,\n          undefined,\n          undefined\n        ]);\n        questions.push([\n          "begin group",\n          "section_" +\n            stageIndex +\n            "_" +\n            sectionIndex +\n            "_" +\n            slugify(programStageSection.name),\n          programStageSection.name,\n          undefined,\n          undefined,\n          undefined,\n          undefined\n        ]);\n        programStageSection.dataElements.forEach(programStageSectionDe => {\n          const de = programStage.programStageDataElements.find(\n            psde => programStageSectionDe.id == psde.dataElement.id\n          );\n          const question_name = de.dataElement.code || slugify(de.dataElement.name);\n          append_to_mappings(question_name, {\n            program: pg.id,\n            programStage: programStage.id,\n            ...de\n          });\n\n          const valueType = de.dataElement.valueType;\n          const optionSet = de.dataElement.optionSet;\n          const question = toQuestion(valueType, optionSet, de.compulsory);\n          "type",\n            "name",\n            "label",\n            "required",\n            "choice_filter",\n            "constraint",\n            "constraint_message",\n            "relevant",\n            "hint",\n            "appearance",\n            "calculation";\n          questions.push([\n            question.type,\n            question_name,\n            de.dataElement.formName || de.dataElement.name,\n            question.required,\n            undefined,\n            question.constraint,\n            question.constraint_message,\n            undefined,\n            undefined,\n            question.appearance\n          ]);\n        });\n        questions.push([\n          "end group",\n          undefined,\n          undefined,\n          undefined,\n          undefined,\n          undefined,\n          undefined\n        ]);\n        sectionIndex = sectionIndex + 1;\n      });\n      questions.push([\n        "end group",\n        undefined,\n        undefined,\n        undefined,\n        undefined,\n        undefined,\n        undefined\n      ]);\n      stageIndex = stageIndex + 1;\n    });\n    //questions.push(["image", "imgUrl", "Photo de la structure"]);\n    //questions.push(["geopoint", "gps", "Coordonn\xe9es GPS"]);\n\n    sheet.name("survey");\n    sheet.cell("A1").value(questions);\n\n    const sheetChoices = workbook.addSheet("choices");\n    const dataElementsWithOptionSets = pg.programStages\n      .flatMap(ps => ps.programStageDataElements)\n      .filter(de => de.dataElement.optionSet);\n    const optionChoices = [\n      ["list_name", "name", "label"],\n      ["orgunit", "TODO", "TODO"],\n      ["yesno", "1", "Oui"],\n      ["yesno", "0", "Non"]\n    ];\n\n    const alreadyPushedOptionSet = new Set();\n    dataElementsWithOptionSets.forEach(de => {\n      if (!alreadyPushedOptionSet.has(de.dataElement.optionSet.id)) {\n        de.dataElement.optionSet.options.forEach(option => {\n          optionChoices.push([\n            slugify(de.dataElement.optionSet.code) ||\n              slugify(de.dataElement.optionSet.name),\n            option.code,\n            option.name\n          ]);\n        });\n        alreadyPushedOptionSet.add(de.dataElement.optionSet.id);\n      }\n    });\n\n    pg.programTrackedEntityAttributes.forEach(de => {\n      if (de.trackedEntityAttribute.optionSet) {\n        if (!alreadyPushedOptionSet.has(de.trackedEntityAttribute.optionSet.id)) {\n          de.trackedEntityAttribute.optionSet.options.forEach(option => {\n            optionChoices.push([\n              slugify(de.trackedEntityAttribute.optionSet.code) ||\n                slugify(de.trackedEntityAttribute.optionSet.name),\n              option.code,\n              option.name\n            ]);\n          });\n          alreadyPushedOptionSet.add(de.trackedEntityAttribute.optionSet.id);\n        }\n      }\n    });\n\n    const sheetSettings = workbook.addSheet("settings");\n    const settings = [\n      ["form_title", "form_id"],\n      [pg.name, slugify(pg.code) || slugify(pg.name)]\n    ];\n    sheetSettings.cell("A1").value(settings);\n\n    sheetChoices.cell("A1").value(optionChoices);\n\n    XlsxPopulate.openAsBlob(workbook, slugify(pg.name) + ".xlsx");\n    const identifier = pg.programTrackedEntityAttributes.find(\n      e => e.trackedEntityAttribute.generated == true\n    );\n    return {\n      program_id: pg.id,\n      tracked_entity_identifier: identifier.trackedEntityAttribute.id,\n      tracked_entity_type: pg.trackedEntityType.id,\n      question_mappings: iaso_mappings\n    };\n    return pg;\n\n'},{id:"vPHBZOSHMfS",name:"XLSForm - Diff two xlsform",params:[{id:"v1",type:"xlsx"},{id:"v2",type:"xlsx"}],code:'\nconst surveyV1 = parameters.v1.sheet("survey");\nconst surveyV2 = parameters.v2.sheet("survey");\n\nconst questionKeysFrom = survey => {\n  return survey\n    .range("B2:B2000")\n    .value()\n    .flat(1)\n    .filter(v => v != null);\n};\n\nconst questionFields = [\n  "type",\n  "name",\n  "label",\n  "constraint",\n  "constraint_message",\n  "relevant",\n  "choice_filter",\n  "required",\n  "hint",\n  "appearance",\n  "calculation"\n];\nconst asQuestions = survey => {\n  const questions = survey\n    .range("A2:K2000")\n    .value()\n    .map(row => {\n      const val = {};\n      questionFields.forEach((col, index) => {\n        let rawVal = row[index];\n        if (rawVal && rawVal["_node"]) {\n          rawVal = rawVal["_node"]["children"];\n        }\n        val[col] = rawVal;\n      });\n      return val;\n    });\n  results = {};\n  questions.forEach(q => (results[q.name] = q));\n  return results;\n};\n\nconst v1_question_keys = new Set(questionKeysFrom(surveyV1));\n\nconst v2_question_keys = new Set(questionKeysFrom(surveyV2));\n\nlet allKeys = new Set([...v1_question_keys, ...v2_question_keys]);\n\nlet same_keys = new Set(\n  [...v1_question_keys].filter(x => v2_question_keys.has(x))\n);\n\nlet deleted_keys = new Set(\n  [...v1_question_keys].filter(x => !v2_question_keys.has(x))\n);\nlet added_keys = new Set(\n  [...v2_question_keys].filter(x => !v1_question_keys.has(x))\n);\n\nquestions_v1 = asQuestions(surveyV1);\n\nquestions_v2 = asQuestions(surveyV2);\ndiffs = [];\nsame_keys.forEach(key => {\n  const q1 = questions_v1[key];\n  const q2 = questions_v2[key];\n  const diffColumns = questionFields.filter(\n    field =>\n      (q1 == undefined && q2 != undefined) ||\n      (q1 != undefined && q2 == undefined) ||\n      (q1 && q2 && q1[field] !== q2[field])\n  );\n  if (diffColumns.length > 0) {\n    diffs.push({ key, diffColumns, v1: q1, v2: q2 });\n  }\n});\nconst flattened_diff = diffs.map(d => {\n  let v = { key: d.key, status: "M", diffColumns: d.diffColumns.join(" , ") };\n  d.diffColumns.forEach(c => {\n    v[c + "_v1"] = d.v1[c];\n    v[c + "_v2"] = d.v2[c];\n  });\n\n  return v;\n});\n\nadded_keys.forEach(added_key => {\n  const q = questions_v2[added_key];\n  let v = {\n    key: added_key,\n    status: "A",\n    diffColumns: ":ALL"\n  };\n  questionFields.forEach(c => {\n    v[c + "_v2"] = q[c];\n  });\n  flattened_diff.push(v);\n});\n\ndeleted_keys.forEach(deleted_key => {\n  const q = questions_v1[deleted_key];\n  let v = {\n    key: deleted_key,\n    status: "D",\n    diffColumns: ":ALL"\n  };\n  questionFields.forEach(c => {\n    v[c + "_v1"] = q[c];\n  });\n  flattened_diff.push(v);\n});\n\nreturn flattened_diff;\nreturn {\n  deleted_keys: Array.from(deleted_keys),\n  added_keys: Array.from(added_keys),\n  same_keys: Array.from(same_keys),\n  allKeys: Array.from(allKeys),\n  v1_question_keys: Array.from(v1_question_keys),\n  v2_question_keys: Array.from(v2_question_keys),\n  diffs: diffs\n};\n\n'},{id:"WJBsaMBdioj",name:"XLSForm - generate a xlsform from a DataSet",params:[{id:"dataSet",type:"dhis2",resourceName:"dataSets"}],code:'const api = await dhis2.api();\n\n    //return await api.get("dataSets");\n    const ds = await api.get("dataSets/" + parameters.dataSet.id, {\n      fields:\n        "id,name,periodType,dataSetElements[dataElement[id,name,formName,code,valueType,categoryCombo[id,name,categoryOptionCombos[id,name,categoryOptions[id,name,code]]]"\n    });\n    const questions = [];\n\n    var collator = new Intl.Collator(undefined, {\n      numeric: true,\n      sensitivity: "base"\n    });\n    const dataSetElements = ds.dataSetElements.sort((a, b) =>\n      collator.compare(a.dataElement.name, b.dataElement.name)\n    );\n\n    function slugify(str) {\n      str = str.replace(/^\\s+|\\s+$/g, ""); // trim\n      str = str.toLowerCase();\n      str = str.normalize("NFD").replace(/[\u0300-\u036f]/g, "")\n      // remove accents, swap \xf1 for n, etc\n      var from = "\xb7/_,:;";\n      var to = "______";\n\n      for (var i = 0, l = from.length; i < l; i++) {\n        str = str.replace(new RegExp(from.charAt(i), "g"), to.charAt(i));\n      }\n\n      str = str\n        .replace(/[^a-z0-9 -]/g, "") // remove invalid chars\n        .replace(/\\s+/g, "_") // collapse whitespace and replace by -\n        .replace(/-+/g, "_"); // collapse dashes\n\n      return str;\n    }\n\n    dataSetElements.forEach(dataSetElement => {\n      const dataElement = dataSetElement.dataElement;\n      dataElement.categoryCombo.categoryOptionCombos.forEach(coc => {\n        const coc_code = coc.categoryOptions.map(o => slugify(o.code)).join("__");\n        let type = "";\n        let constraint;\n        let constraint_message;\n        let required;\n\n        if (\n          dataElement.valueType == "BOOLEAN" ||\n          dataElement.valueType == "TRUE_ONLY"\n        ) {\n          type = "select_one yesno";\n        } else if (dataElement.valueType == "DATE") {\n          type = "date";\n        } else if (dataElement.valueType == "TEXT") {\n          type = "text";\n        } else if (dataElement.valueType == "PERCENTAGE") {\n          type = "integer";\n        } else if (dataElement.valueType == "INTEGER") {\n          type = "integer";\n        } else if (dataElement.valueType == "INTEGER_POSITIVE") {\n          type = "integer";\n          constraint = ". > 0";\n          constraint_message = "must be non-zero positive number";\n        } else if (dataElement.valueType == "INTEGER_ZERO_OR_POSITIVE") {\n          type = "integer";\n          constraint = ". >= 0";\n          constraint_message = "must be a positive number";\n        } else if (dataElement.valueType == "INTEGER_ZERO_OR_NEGATIVE") {\n          type = "integer";\n          constraint = ". <= 0";\n          constraint_message = "must be a negative number";\n        } else if (dataElement.valueType == "INTEGER_NEGATIVE") {\n          type = "integer";\n          constraint = ". < 0";\n          constraint_message = "must be non-zero negative number";\n        } else if (dataElement.valueType == "NUMBER") {\n          type = "decimal";\n        } else if (dataElement.valueType == "COORDINATE") {\n          type = "geopoint";\n        }\n        let label = dataElement.formName || dataElement.name;\n        let code = slugify(dataElement.code || dataElement.name);\n        if (coc.name != "default") {\n          label = label + " " + coc.name;\n          code = code + "__" + coc_code;\n        }\n        questions.push({\n          type: type,\n          name: code,\n          label: label,\n          constraint: constraint,\n          constraint_message: constraint_message\n        });\n      });\n\n      //questions.push({});\n    });\n\n    const workbook = await XlsxPopulate.fromBlankAsync();\n\n    const questionFields = [\n      "type",\n      "name",\n      "label",\n      "constraint",\n      "constraint_message",\n      "relevant",\n      "choice_filter",\n      "required",\n      "hint",\n      "appearance",\n      "calculation"\n    ];\n\n    const sheet = workbook.sheet(0);\n    sheet.name("survey");\n    sheet.cell("A1").value([questionFields])\n    sheet.cell("A2").value(questions.map(question => questionFields.map(f => question[f])));\n\n\n    const sheetChoices = workbook.addSheet("choices");\n    const optionChoices = [\n      ["list_name", "name", "label"],\n      ["yesno", "yes", "1"],\n      ["yesno", "no", "0"]\n    ];\n    sheetChoices.cell("A1").value(optionChoices);\n\n    const sheetSettings = workbook.addSheet("settings");\n    const settings = [\n      ["form_title","form_id"],\n      [ds.name,ds.code]\n    ];\n\n    sheetSettings.cell("A1").value(settings);\n\n    XlsxPopulate.openAsBlob(workbook, slugify(ds.name)+".xslx");\n\n\n    return questions;\n    '},{id:"ZZJcZFTSl50",name:"Coordinates - Coordinates coverage",code:'\nlet stats = [];\nconst api = await dhis2.api();\n\nconst levels = (await api.get("organisationUnitLevels", {\n  fields: "id,name,level",\n  order: "level"\n})).organisationUnitLevels;\n\nfunction perc2color(perc) {\n  var r,\n    g,\n    b = 0;\n  if (perc < 50) {\n    r = 255;\n    g = Math.round(5.1 * perc);\n  } else {\n    g = 255;\n    r = Math.round(510 - 5.1 * perc);\n  }\n  var h = r * 0x10000 + g * 0x100 + b * 0x1;\n  return "#" + ("000000" + h.toString(16)).slice(-6);\n}\nconst system = await api.get("system/info");\nconst version = system.version;\nconst v = version.split(".");\nconst vfloat = parseFloat(v[0] + "." + v[1]);\nconst fieldCoordinates = vfloat >= 2.32 ? "geometry" : "coordinates";\nconst ouFields = "id,name,coordinates,geometry,ancestors[id,name],leaf,level"\nlet provinces = await api.get("organisationUnits", {\n  fields: ouFields,\n  filter: ["level:eq:2"],\n  paging: false\n});\nlet allOrgunits = [];\nconst facilityLevel = levels[levels.length - 1];\nfor (province of provinces.organisationUnits) {\n  const children = await api.get("organisationUnits", {\n    fields: ouFields,\n    filter: ["path:ilike:" + province.id],\n    paging: false\n  });\n  withCoordinates = children.organisationUnits.filter(\n    ou => ou.level == facilityLevel.level && (ou.coordinates || ou.geometry)\n  ).length;\n  withoutCoordinates = children.organisationUnits.filter(\n    ou =>\n      facilityLevel.level &&\n      (ou.coordinates == undefined && ou.geometry == undefined)\n  ).length;\n  province.withCoordinates = withCoordinates;\n  province.withoutCoordinates = withoutCoordinates;\n  province.totalFacilities = withCoordinates + withoutCoordinates\n  province.percentage =\n    ((withCoordinates * 100) / (withCoordinates + withoutCoordinates)).toFixed(2);\n  province.color = "blue";\n  province.fillColor = perc2color(province.percentage);\n  stats.push(province);\n  children.organisationUnits.forEach(ou => allOrgunits.push(ou));\n}\nreport.register("organisationUnits", allOrgunits);\nreport.register("stats2", stats);\nstats = []\nallOrgunits.forEach(ou => turf.geometrify(ou))\nconst districts = allOrgunits.filter(ou => ou.level == 3)\nconst badPoints = []\nfor (district of districts ) {\n  children = allOrgunits.filter(ou => ou.level == facilityLevel.level && ou.ancestors[2] && ou.ancestors[2].id == district.id)\n  withCoordinates = children.filter(\n    ou => (ou.coordinates || ou.geometry)\n  ).length;\n  withoutCoordinates = children.filter(\n    ou =>\n      (ou.coordinates == undefined && ou.geometry == undefined)\n  ).length;\n  children.filter(ou => ou.geometry).forEach( ou => {\n    ou.inside = turf.booleanPointInPolygon(ou.geometry, district.geometry);\n    ou.color = ou.inside ? "green" : "red"\n    if (ou.inside == false) {\n      badPoints.push(ou)\n    }\n  })\n\n  district.pointsInParentPolygon = children.filter(ou => ou.inside == true).length\n  district.withCoordinates = withCoordinates;\n  district.withoutCoordinates = withoutCoordinates;\n  district.totalFacilities = withCoordinates + withoutCoordinates\n  district.percentage =\n    ((withCoordinates * 100) / (withCoordinates + withoutCoordinates)).toFixed(2);\n\n\n  district.color = "blue";\n  district.fillColor = perc2color(district.percentage);\n  stats.push(district);\n}\n\nreport.register("stats3", stats);\nreport.register("stats4", stats.concat(badPoints));\nreturn "";\n  ',report:"\n[PageOrientation orientation:\"landscape\" /]\n# Coordinates Coverage\n\n> Number of org units with coordinates\n> --------------------------------------------------------------------\n>                 Number of org units\n\n[PageBreak /]\n## At level 2\n[FlexBox]\n[OrgunitMap lines:stats2 /]\n[/FlexBox]\n[PageBreak /]\n\n## At level 3\n[FlexBox]\n[OrgunitMap lines:stats3 /]\n[/FlexBox]\n[PageBreak /]\n\n\n## Detailed data\n[DataTable data:`stats2.map(l => _.omit(l, ['id','geometry','coordinates','ancestors','color','fillColor']))` label:\"Province coverage data\" perPage:20/]\n\n[br/][br/][br/]\n[DataTable data:`stats3.map(l => _.omit(l, ['id','geometry','coordinates','ancestors','color','fillColor']))` label:\"District coverage data\" perPage:5/]\n\n# Coordinates not belonging to parent polygon\n\n## All points\n[FlexBox]\n[OrgunitMap lines:organisationUnits width:\"700px\" height:\"700px\"/]\n[/FlexBox]\n[PageBreak /]\n\n## All points not belonging to parent polygon\n[FlexBox]\n[OrgunitMap lines:`stats4.map(l => _.omit(l, ['color','fillColor']))` width:\"700px\" height:\"700px\"/]\n[/FlexBox]\n"},{id:"FP8cYl1lSF6",name:"demo dashboard to pdf",params:[{id:"dashboard",label:"Search",type:"dhis2",resourceName:"dashboards",default:{name:"PLAY Delivery",id:"iMnYyBfSxmM"}}],code:'\n    let params = new URLSearchParams(window.location.href.split("?")[1]);\n    const dashboardId = params.get("dashboardId") || parameters.dashboard.id\n// press crtl-r to run\nconst api = await dhis2.api();\nconst ou = await api.get("dashboards/"+dashboardId, {\n  fields: "id,name,dashboardItems[type,chart[id,name],map[id,name],reportTable[id,name]]",\n  paging: false\n});\nconst vals = ou.dashboardItems.filter(d => d.chart || d.map|| d.reportTable);\n\nreport.register("charts", vals);\nreturn "";\n',report:'\n[PageOrientation orientation:"landscape" /]\n\n\n[MyLoop value:charts]\n [Dhis2Item /]\n [PageBreak /]\n[/MyLoop]'},{id:"azwst23HaO2",name:"demo dashboard to pdf 2",params:[{id:"dashboard",label:"Search",type:"dhis2",resourceName:"dashboards",default:{name:"PLAY Delivery",id:"iMnYyBfSxmM"}}],code:'\n    let params = new URLSearchParams(window.location.href.split("?")[1]);\n    const dashboardId = params.get("dashboardId") || parameters.dashboard.id\n    const api = await dhis2.api();\n\n    const toDataURL = url =>\n      fetch(url)\n        .then(response => response.blob())\n        .then(\n          blob =>\n            new Promise((resolve, reject) => {\n              const reader = new FileReader();\n              reader.onloadend = () => resolve(reader.result);\n              reader.onerror = reject;\n              reader.readAsDataURL(blob);\n            })\n        );\n\n    const ou = await api.get("dashboards/" + dashboardId, {\n      fields:\n        "id,name,dashboardItems[type,chart[id,name],map[id,name],reportTable[id,name]]",\n      paging: false\n    });\n    const dashboardItems = ou.dashboardItems.filter(\n      d => d.chart || d.map || d.reportTable\n    );\n\n    const results = [];\n    for (item of dashboardItems) {\n      const prefixUrl = "../../";\n      const propName =\n        item && item.type\n          ? item.type == "REPORT_TABLE"\n            ? "reportTable"\n            : item.type.toLowerCase()\n          : "";\n\n      const itemName = item && item[propName] ? item[propName].name : "";\n      let resourceName = undefined;\n      if (propName == "reportTable") {\n        resourceName = "reportTables";\n      } else {\n        resourceName = propName.toLowerCase() + "s";\n      }\n      let url = prefixUrl + resourceName + "/" + item[propName].id + "/data";\n      let content = undefined;\n      let contentType\n      if (propName == "reportTable") {\n        url += ".html+css";\n        contentType = "html";\n        content = await fetch(url).then(r => r.text());\n      } else {\n        url += ".png";\n        contentType = "img";\n        content = await toDataURL(url);\n      }\n\n      results.push({ item, url, content, contentType });\n    }\n    report.register("charts", results);\n    return null;\n\n',report:'\n[PageOrientation orientation:"landscape" /]\n\n\n[MyLoop value:charts]\n [Dhis2Content /]\n [PageBreak /]\n[/MyLoop]'},{id:"df",name:"Users - Last metadata changes (this months max 1000)",code:'\ndate = new Date();\nvar newDate = new Date(date.setMonth(date.getMonth() - 1));\nconst api = await dhis2.api();\nconst ou = await api.get("metadataAudits", {\n  pageSize: 1000,\n  createdAt: date.toJSON().substring(0, 7)\n});\nou.metadataAudits = ou.metadataAudits.sort(\n  (a, b) => -1 * a.createdAt.localeCompare(b.createdAt)\n);\nconst format_value = mutation => {\n  if (mutation.path == "attributeValues") {\n    return mutation.value\n      .map(av => av.attribute.code + " => " + av.value)\n      .join("\\n");\n  }\n  if (mutation.path == "dataSetElements") {\n    return (\n      mutation.path + " => " + mutation.value.map(av => av.dataElement.name)\n    );\n  }\n  return mutation.path + " => " + mutation.value;\n};\n\nou.metadataAudits.forEach(met => {\n  met.klass = met.klass.split(".")[met.klass.split(".").length - 1];\n  if (met.value) {\n    const value = JSON.parse(met.value);\n    let val = value.mutations\n      ? value.mutations\n          .filter(m => m.path !== "lastUpdated")\n          .map(m => format_value(m))\n      : [];\n    if (met.type === "CREATE" || met.type === "DELETE") {\n      val = [value.name + " (" + value.id + ")"];\n    }\n    delete met.value;\n    met.what = val.join("\\n ");\n  }\n});\nreturn ou.metadataAudits;\n'},{id:"vgSvwOMNAvQ",name:"Export - Data values for a given orgUnit, dataSet and periods",params:[{id:"dataSet",type:"dhis2",resourceName:"dataSets"},{id:"orgUnit",type:"dhis2",resourceName:"organisationUnits"},{id:"periods",type:"text"}],code:'\n    // #/recipes/vgSvwOMNAvQ?dataSet=aLpVgfXiz0f&orgUnit=U514Dz4v9pv&periods=2018,2019&autorun=true\n    let params = new URLSearchParams(window.location.href.split("?")[1]);\n    const periods = params.get("periods") || parameters.periods;\n    const dataSetId = params.get("dataSet") || parameters.dataSet.id;\n    const orgUnitId = params.get("orgUnit") || parameters.orgUnit.id;\n    const api = await dhis2.api();\n\n    const dataSet = await api.get("dataSets/" + dataSetId, {\n      fields:\n        "id,dataSetElements[dataElement[id,name,categoryCombo[id,name,categoryOptionCombos[id,name]"\n    });\n\n    const dataElementsById = {};\n\n    const categoryOptionCombosById = {};\n\n    dataSet.dataSetElements.forEach(dse => {\n      const dataElement = dse.dataElement;\n      dataElementsById[dataElement.id] = {\n        id: dataElement.id,\n        name: dataElement.name\n      };\n      const categoryOptionCombos = dataElement.categoryCombo.categoryOptionCombos;\n      categoryOptionCombos.forEach(coc => (categoryOptionCombosById[coc.id] = coc));\n    });\n\n    const periodsQuery =\n      "period=" +\n      periods\n        .split(",")\n        .map(p => p.trim())\n        .join("&period=");\n    const ouQuery = "orgUnit=" + orgUnitId;\n\n    const url =\n      "dataValueSets?" + periodsQuery + "&" + ouQuery + "&dataSet=" + dataSetId;\n    const vals = await api.get(url);\n\n    if (!vals.dataValues) {\n      return "no data";\n    }\n\n    vals.dataValues.forEach(dv => {\n      dv.dataElement = dataElementsById[dv.dataElement];\n      dv.categoryOptionCombo = categoryOptionCombosById[dv.categoryOptionCombo];\n    });\n\n    const values = _.flattenObjects(vals.dataValues);\n    const workbook = await XlsxPopulate.fromBlankAsync();\n    const columns = Object.keys(values[0]);\n\n    const sheet = workbook.sheet(0);\n    sheet\n      .cell("A1")\n      .value([columns])\n      .style("fontColor", "ff0000");\n\n    const r = sheet.cell("A2");\n\n    r.value(values.map(dv => columns.map(col => dv[col])));\n    sheet.column("A").width(30);\n    sheet.column("B").width(30);\n    sheet.column("C").width(30);\n    sheet.column("D").width(30);\n    sheet.column("E").width(30);\n    sheet.column("F").width(30);\n    sheet.column("G").width(30);\n    sheet.column("H").width(30);\n\n    XlsxPopulate.openAsBlob(\n      workbook,\n      "datavalues-" + orgUnitId + "-" + dataSetId + "-" + periods + "" + ".xlsx"\n    );\n    return vals.dataValues;\n'},{id:"azdflm3HaO2",name:"Play : Audit, select and fix orgunit name demo",report:'\n# Hello\n\n* Run once, select a few orgunits\n* then click "Fix me"\n* then confirm\n* this will patch the orgunits name and\n* relaunch the recipe\n\n[DataTable data:organisationUnits label:"organisationUnits" perPage:20 selectableRows:"multiple" ]\n[DataTableAction label:"Fix me" onClick:organisationUnitsOnClick/]\n[DataTableAction label:"Unfix me" onClick:organisationUnitsOnClick/]\n[/DataTable]\n\ndemo\n      ',code:'\n\n// press crtl-r to run\nconst api = await dhis2.api();\n\nconst ou = await api.get("organisationUnits", {\n  fields: "id,name,coordinates,geometry",\n  paging: false\n});\n\nreport.register("organisationUnits", ou.organisationUnits);\nreport.register("organisationUnitsOnClick", async selectedRows => {\n  const details = [];\n  const confirm = prompt(\n    "Please confirm you want to modify all " +\n      selectedRows.length +\n      " orgunits. (Can\'t be undone !!)",\n    "Yes"\n  );\n  if (confirm == "Yes") {\n    for (selected of selectedRows) {\n      details.push(\n        await api.patch("organisationUnits/" + selected.id, {\n          name: selected.name + " (modified by this recipe)"\n        })\n      );\n    }\n    report.reset("run");\n    // report.reset("clear");\n  }\n});\n\nreturn "";\n'},{id:"belflm3Ha77",name:"Covid Belgium : hospitalisation",report:'\n    [PageOrientation orientation:"landscape" /]\n    # Overview NEW_ING last month\n    [FlexBox]\n    [IdyllVegaLite data:data spec:`{\n      title: "Belgium",\n      width: 900,\n      height: 300,\n      "encoding": {"x": {"field": "DATE", "type": "temporal"}},\n\n      "layer": [\n        {\n          "encoding": {\n            "color": {"field": "PROVINCE", "type": "nominal"},\n            "y": {"field": "NEW_IN", "type": "quantitative"}\n          },\n          "layer": [\n            {"mark": "line"},\n            {"transform": [{"filter": {"selection": "hover"}}], "mark": "point"},\n\n          ]\n        },\n        {\n          "transform": [{"pivot": "PROVINCE", "value": "NEW_IN", "groupby": ["DATE"]}],\n          "mark": "rule",\n          "encoding": {\n            "opacity": {\n              "condition": {"value": 0.3, "selection": "hover"},\n              "value": 0\n            },\n            "tooltip": [\n              {"field": "Antwerpen", "type": "quantitative"},\n              {"field": "BrabantWallon", "type": "quantitative"},\n              {"field": "Brussels", "type": "quantitative"},\n              {"field": "Hainaut", "type": "quantitative"},\n              {"field": "Limburg", "type": "quantitative"},\n                        {"field": "Li\xe8ge", "type": "quantitative"},\n                        {"field": "Luxembourg", "type": "quantitative"},\n                        {"field": "Namur", "type": "quantitative"},\n                        {"field": "OostVlaanderen", "type": "quantitative"},\n                         {"field": "WestVlaanderen", "type": "quantitative"},\n                        {"field": "VlaamsBrabant", "type": "quantitative"},\n\n            ]\n          },\n          "selection": {\n            "hover": {\n              "type": "single",\n              "fields": ["DATE"],\n              "nearest": true,\n              "on": "mouseover",\n              "empty": "none",\n              "clear": "mouseout"\n            }\n          }\n        }\n      ]\n    }:` /]\n    [IdyllVegaLite data:data spec:`{\n       "width": 800, "height": 250,\n      "resolve": {"scale": {"color": "independent"}},\n\n      "layer": [\n         {"mark": "bar",\n          "encoding": {\n            "x": {"aggregate": "sum", "field": "NEW_IN", "type": "quantitative", "stack": "zero"},\n            "y": {"field": "PROVINCE", "type": "nominal"},\n            "color": {"field": "PROVINCE", "type": "nominal"}},\n\n         },\n         {"mark": {"type": "text", "dx": -15, "dy": 3},\n          "encoding": {\n            "x": {"aggregate": "sum", "field": "NEW_IN", "type": "quantitative", "stack": "zero"},\n            "y": {"field": "PROVINCE", "type": "nominal"},\n            "color": {"field": "PROVINCE", "type": "nominal", "scale": {"range": ["white"]}, "legend": null},\n            "text": {"aggregate": "sum", "field": "NEW_IN", "type": "quantitative", "format": ".0f"}}\n        }\n      ]\n\n    }:` /]\n    [/FlexBox]\n\n# NEW_IN avg last 7 days\n[FlexBox]\n[OrgunitMap lines:provincesGeojson width:"400px" height:"400px"/]\n[DataTable data:`provincesGeojson.map(l => l.properties):` label:"Province NEW_IN avg data" perPage:20/]\n\n[/FlexBox]\n# NEW_IN in last month\n[FlexBox]\n\n[IdyllVegaLite data:`graphByProvince["Antwerpen"].data` spec:`graphByProvince["Antwerpen"].spec` /]\n[IdyllVegaLite data:`graphByProvince["OostVlaanderen"].data` spec:`graphByProvince["OostVlaanderen"].spec` /]\n[IdyllVegaLite data:`graphByProvince["WestVlaanderen"].data` spec:`graphByProvince["WestVlaanderen"].spec` /]\n[IdyllVegaLite data:`graphByProvince["VlaamsBrabant"].data` spec:`graphByProvince["VlaamsBrabant"].spec` /]\n[IdyllVegaLite data:`graphByProvince["Limburg"].data` spec:`graphByProvince["Limburg"].spec` /]\n[IdyllVegaLite data:`graphByProvince["Brussels"].data` spec:`graphByProvince["Brussels"].spec` /]\n[IdyllVegaLite data:`graphByProvince["Li\xe8ge"].data` spec:`graphByProvince["Li\xe8ge"].spec` /]\n[IdyllVegaLite data:`graphByProvince["Namur"].data` spec:`graphByProvince["Namur"].spec` /]\n[IdyllVegaLite data:`graphByProvince["BrabantWallon"].data` spec:`graphByProvince["BrabantWallon"].spec` /]\n[IdyllVegaLite data:`graphByProvince["Hainaut"].data` spec:`graphByProvince["Hainaut"].spec` /]\n[IdyllVegaLite data:`graphByProvince["Luxembourg"].data` spec:`graphByProvince["Luxembourg"].spec` /]\n[/FlexBox]\n    ',code:'\n\n  const data = (\n    await fetch("https://epistat.sciensano.be/Data/COVID19BE_HOSP.json").then(r =>\n      r.json()\n    )\n  ).filter(d => d.DATE > "2020-09-01");\n\n  report.register("data", data);\n\n  const provincesGeojson = await fetch(\n    "https://mestachs.github.io/belgium/provinces.geo.json"\n  ).then(r => r.json());\n\n  report.register("provincesGeojson", provincesGeojson.features);\n\n  function toColor(perc) {\n    var r,\n      g,\n      b = 0;\n    if (perc < 50) {\n      r = 255;\n      g = Math.round(5.1 * perc);\n    } else {\n      g = 255;\n      r = Math.round(510 - 5.1 * perc);\n    }\n    var h = r * 0x10000 + g * 0x100 + b * 0x1;\n    return "#" + ("000000" + h.toString(16)).slice(-6);\n  }\n\n  const provinces = new Set();\n\n  data.forEach(d => provinces.add(d.PROVINCE));\n  const provinceMapping = {\n    "East Flanders": "OostVlaanderen",\n    Antwerp: "Antwerpen",\n    Brussels: "Brussels",\n    Hainaut: "Hainaut",\n    Limburg: "Limburg",\n    Liege: "Li\xe8ge",\n    Luxembourg: "Luxembourg",\n    Namur: "Namur",\n    "Flemish Brabant": "VlaamsBrabant",\n    "Walloon Brabant": "BrabantWallon",\n    "West Flanders": "WestVlaanderen"\n  };\n  provincesGeojson.features.forEach(province => {\n    const provinceName = provinceMapping[province.properties.NAME_1];\n    const provinceData = data.filter(d => d.PROVINCE == provinceName);\n    if (provinceData.length == 0) {\n      throw new Error(\n        "no data for " + province.properties.NAME_1 + " vs " + provinceName\n      );\n    }\n    const provinceDataLast7days = provinceData.slice(\n      provinceData.length - 7,\n      provinceData.length\n    );\n    const provinceDataLast14days = provinceData.slice(\n      provinceData.length - 14,\n      provinceData.length\n    );\n\n    const last7AvgRounded = _.meanBy(\n      provinceDataLast7days,\n      p => p.NEW_IN\n    ).toFixed(2);\n    const last14AvgRounded = _.meanBy(\n      provinceDataLast14days,\n      p => p.NEW_IN\n    ).toFixed(2);\n    let percentage = 0;\n    if (last7AvgRounded >= 30) {\n      percentage = 0;\n    }\n    if (last7AvgRounded >= 20) {\n      percentage = 5;\n    }\n    if (last7AvgRounded >= 8) {\n      percentage = 10;\n    } else if (last7AvgRounded >= 6) {\n      percentage = 25;\n    } else if (last7AvgRounded >= 4) {\n      percentage = 35;\n    } else if (last7AvgRounded >= 2) {\n      percentage = 50;\n    } else if (last7AvgRounded > 0) {\n      percentage = 75;\n    } else {\n      percentage = 100;\n    }\n    province.properties = {\n      province: provinceName,\n      Last7days: last7AvgRounded,\n      Last14days: last14AvgRounded\n      //percentage: percentage\n    };\n    province.fillColor = toColor(percentage);\n    province.opacity = 0.6\n  });\n\n  const graphByProvince = {};\n  provinces.forEach(province => {\n    const graph = {\n      data: data.filter(d => d.PROVINCE == province),\n      spec: {\n        width: 300,\n        height: 100,\n        mark: "bar",\n        title: province,\n        encoding: {\n          tooltip: [\n            { field: "NEW_IN", type: "quantitative" },\n            { field: "DATE", type: "temporal" }\n          ],\n          x: {\n            field: "DATE",\n            type: "temporal",\n            axis: { title: "time", format: "%Y%m%d" }\n          },\n\n          y: {\n            field: "NEW_IN",\n            type: "quantitative",\n            axis: {\n              title: "new in",\n              tickCount: 5\n            },\n            scale: { domain: [0, 35] }\n          }\n        }\n      }\n    };\n    graphByProvince[province] = graph;\n  });\n\n  report.register("graphByProvince", graphByProvince);\n\n  return "";\n  '},{id:"zti4UfUGliw",name:"BLSQ - Export dataset",params:[{id:"dataset",label:"Search for dataset",type:"dhis2",resourceName:"dataSets"}],code:'\n\n    let api = await dhis2.api();\n\n    const datasets = await api.get("dataSets", {\n      fields:\n        "id,name,href,periodType,:all,dataSetElements[dataElement[id,code,name,shortName,domainType,valueType,aggregationType,description,categoryCombo[id,name,categoryOptionCombos[id,name,code,categoryCombo[id,name]]],formName,zeroIsSignificant,optionSet[id,name,options[id,code,name,optionSet[id]]]]]",\n      filter: "name:eq:" + parameters.dataset.name\n    });\n\n    const ds = datasets.dataSets[0];\n\n    const dataElements = ds.dataSetElements.flatMap(dse => dse.dataElement);\n    const optionSets = _.uniqBy(\n      dataElements.filter(de=> de.optionSet).map(de => de.optionSet),\n      cc => cc.id\n    );\n\n    const options = _.uniqBy(\n      dataElements.filter(de=> de.optionSet).flatMap(de => de.optionSet.options),\n      cc => cc.id\n    );\n    const categoryCombos = _.uniqBy(\n      dataElements.map(de => de.categoryCombo),\n      cc => cc.id\n    );\n\n    const categoryOptionCombos = _.uniqBy(\n      dataElements.flatMap(de => de.categoryCombo.categoryOptionCombos),\n      cc => cc.id\n    );\n\n    report.register("dataSet", ds);\n    report.register(\n      "dataElements",\n      _.reorderColumns(\n        _.renameColumns(_.flattenObjects(dataElements), {\n          "categoryCombo-id": "categoryCombo"\n        }),\n        [\n          "id",\n          "name",\n          "shortName",\n          "code",\n          "aggregationType",\n          "domainType",\n          "valueType",\n          "zeroIsSignificant",\n          "categoryCombo-name",\n          "categoryCombo",\n          "optionSet-id",\n          "optionSet-name",\n        ]\n      )\n    );\n\n    report.register(\n      "categoryCombos",\n      _.reorderColumns(categoryCombos, ["id", "name"])\n    );\n    report.register(\n      "categoryOptionCombos",\n      _.reorderColumns(_.flattenObjects(categoryOptionCombos), ["id", "code","name","categoryCombo-id","categoryCombo-name"])\n    );\n    report.register(\n      "optionSets",\n      _.reorderColumns(optionSets,["id","name"])\n    )\n    report.register(\n      "options",\n      _.flattenObjects(options)\n    )\n    return "";\n    ',report:'\n    DataSet : **[Display value:`dataSet.name` /]** - [Display value:`dataSet.periodType` /].\n\n    from [Display value:`dataSet.href` /]\n\n    # Data elements\n    [DataTable data:dataElements label:"Data Elements" perPage:5/]\n\n    # Category Combos\n    [DataTable data:categoryCombos label:"categoryCombos" perPage:5/]\n\n    # Category Option Combos\n    [DataTable data:categoryOptionCombos label:"categoryOptionCombos" perPage:5/]\n\n    # Option Sets\n    [DataTable data:optionSets label:"optionSets" perPage:5/]\n\n    # Options\n    [DataTable data:options label:"options" perPage:5/]\n    '},{id:"ay1YOx7IwyH",name:"Dataset similarities",code:'\n\n    const api = await dhis2.api();\n    const dataElements = (\n      await api.get("dataElements", {\n        fields: "id,name,dataSetElements[dataSet[id,name]]",\n        paging: false\n      })\n    ).dataElements;\n\n    const dataSets = (\n      await api.get("dataSets", {\n        fields: "id,name,periodType,dataSetElements[dataElement[id,name]]",\n        paging: false\n      })\n    ).dataSets;\n    const selectedDataSets = dataSets.filter(\n      ds => !ds.name.includes("ORBF -") && ds.dataSetElements.length > 0\n    );\n    const humanResults = [];\n    const results = new Set();\n    selectedDataSets.forEach(dsA => {\n      selectedDataSets.forEach(dsB => {\n        if (dsA.id !== dsB.id) {\n          const setA = new Set(dsA.dataSetElements.map(dse => dse.dataElement.id));\n          const setB = new Set(dsB.dataSetElements.map(dse => dse.dataElement.id));\n          const deInA = dsB.dataSetElements.filter(dse =>\n            setA.has(dse.dataElement.id)\n          );\n          const notInA = dsB.dataSetElements.filter(\n            dse => !setA.has(dse.dataElement.id)\n          );\n          const notInB = dsA.dataSetElements.filter(\n            dse => !setB.has(dse.dataElement.id)\n          );\n          const pendwidth = Math.min(Math.max(1, deInA.length), 20);\n          const dotlineA =\n            dsA.id + " -- " + dsB.id + " [penwidth=" + pendwidth + "]";\n          const dotlineB =\n            dsB.id + " -- " + dsA.id + " [penwidth=" + pendwidth + "]";\n          if (\n            deInA.length > 0 &&\n            !results.has(dotlineA) &&\n            !results.has(dotlineB)\n          ) {\n            results.add(dotlineA);\n            humanResults.push({\n              dsA: dsA.name,\n              dsB: dsB.name,\n              commonElementsSize: deInA.length,\n              ratio:\n                (deInA.length / (deInA.length + notInA.length + notInB.length)) *\n                100,\n              notInASize: notInA.length,\n              notInBSize: notInB.length,\n              commonElements: deInA.map(dse => dse.dataElement.name).join("\\n"),\n              notInA: notInA.map(dse => dse.dataElement.name).join("\\n"),\n              notInB: notInB.map(dse => dse.dataElement.name).join("\\n")\n            });\n            results.add(dsA.id + \'[label="\' + dsA.name + \'"]\');\n            results.add(dsB.id + \'[label="\' + dsB.name + \'"]\');\n          }\n        }\n      });\n    });\n\n    const finalresults = ["graph G {"].concat(Array.from(results)).concat(["}\\n"]);\n\n    _.copyToClipBoard(finalresults.join("\\n"));\n    return humanResults;\n    '},{id:"R1vONil9UYA",name:"Export program definition as xlsx",params:[{id:"program",type:"dhis2",label:"Search",resourceName:"programs"},{id:"csv_to_map",type:"csv"}],code:'\n\nconst programId = parameters.program.id;\n\nconst api = await dhis2.api();\nconst program = await api.get("programs/" + programId, {\n  fields:\n    "id,name,categoryCombo[id,name,categoryOptionCombos[id,name]]" +\n    ",trackedEntityType[id,name,code,trackedEntityTypeAttributes[id,name,trackedEntityAttribute[id,name,code,valueType,optionSet[name,options[id,name,code]]]]]" +\n    ",programStages[id,name,programStageDataElements[compulsory,dataElement[id,name,code,valueType,optionSet[name,options[id,name,code]]]]"\n});\n\nconst codify = name => {\n  if (name == undefined) {\n    return undefined;\n  }\n  return name\n    .toLowerCase()\n    .normalize("NFD")\n    .replace(/[\\u0300-\\u036f]/g, "")\n    .replace(/[\\(\\):]/g, "")\n    .split(",")\n    .join("_")\n    .split("\'")\n    .join("_")\n    .split("-")\n    .join("_")\n    .split(" ")\n    .join("_")\n    .split(String.fromCharCode(8217))\n    .join("_")\n    .split("?")\n    .join("_")\n    .replace(/__/, "_")\n    .replace(/_+/g, "_");\n};\n\nconst targetOptionSetsRaw = [];\n\nconst targetColumns = [\n  {\n    code: "organisation_unit_uid",\n    id: "organisation_unit_uid",\n    value_type: "UID",\n    name: "organisation_unit_uid",\n    required: true,\n    option_set: "",\n    kind: "program.orgunitid"\n  }\n];\n\nif (program.categoryCombo.name !== "default") {\n  targetColumns.push({\n    code: "attribute_category_option",\n    id: "attributeCategoryOption",\n    value_type: "UID",\n    name: program["categoryCombo"]["name"],\n    required: true,\n    option_set: codify(program.categoryCombo.name),\n    kind: "program.aoc"\n  });\n\n  for (let option of program["categoryCombo"]["categoryOptionCombos"]) {\n    targetOptionSetsRaw.push({\n      option_set: codify(program.categoryCombo.name),\n      value: option.id,\n      name: option.name\n    });\n  }\n}\n\nif (program.trackedEntityType) {\n  targetColumns.push({\n    code: "enrollment_date",\n    id: "enrollment_date",\n    value_type: "DATE",\n    name: "enrollment date",\n    required: true,\n    option_set: "",\n    kind: "enrollmentDate"\n  });\n\n  for (let tei_attribute of program.trackedEntityType\n    .trackedEntityTypeAttributes) {\n    code = codify(tei_attribute["name"]);\n    targetColumns.push({\n      code: "tei." + code,\n      id: tei_attribute["trackedEntityAttribute"]["id"],\n      name: tei_attribute["name"],\n      required: true,\n      value_type: tei_attribute.trackedEntityAttribute.valueType,\n      option_set: tei_attribute.trackedEntityAttribute.optionSet\n        ? codify(tei_attribute.trackedEntityAttribute.optionSet.name)\n        : undefined,\n      kind: "tei.attributes"\n    });\n\n    if (tei_attribute.trackedEntityAttribute.optionSet) {\n      for (let option of tei_attribute.trackedEntityAttribute.optionSet\n        .options) {\n        targetOptionSetsRaw.push({\n          option_set: codify(\n            tei_attribute.trackedEntityAttribute.optionSet.name\n          ),\n          value: option.code,\n          name: option.name\n        });\n      }\n    }\n  }\n}\n\nfor (let programStage of program.programStages) {\n  const stage_code = codify(programStage.name);\n  targetColumns.push({\n    code: stage_code + ".event_date",\n    id: programStage.id + ".event_date",\n    name: programStage.name + " - Event date",\n    value_type: "DATE",\n    required: true,\n    kind: "program_stage.event_date"\n  });\n\n  targetColumns.push({\n    code: stage_code + ".completed",\n    id: programStage.id + ".completed",\n    name: programStage.name + " - Completed",\n    value_type: "BOOLEAN",\n    required: true,\n    kind: "program_stage.completed"\n  });\n  for (let programStageDataElement of programStage.programStageDataElements) {\n    const dataElement = programStageDataElement.dataElement;\n    targetColumns.push({\n      code: stage_code + "." + codify(dataElement.name),\n      id: programStage.id + "." + dataElement.id,\n      name: programStage.name + " - " + dataElement.name,\n      value_type: dataElement.valueType,\n      option_set: dataElement.optionSet\n        ? codify(dataElement.optionSet.name)\n        : undefined,\n      kind: "program_stage.de"\n    });\n    if (dataElement.optionSet) {\n      for (let option of dataElement.optionSet.options) {\n        targetOptionSetsRaw.push({\n          option_set: codify(dataElement.optionSet.name),\n          value: option.code,\n          name: option.name\n        });\n      }\n    }\n  }\n}\n\nconst targetOptionSets = _.uniqWith(targetOptionSetsRaw, _.isEqual);\n\nconst workbook = await XlsxPopulate.fromBlankAsync();\nif (parameters.csv_to_map) {\n  const sourceColumnsSheet = workbook.addSheet("source-columns");\n  sourceColumnsSheet.cell("A1").value([["code", "name"]]);\n  sourceColumnsSheet\n    .cell("A2")\n    .value(parameters.csv_to_map.meta.fields.map(s => [codify(s), s]));\n}\nconst targetColumnsSheet = workbook.addSheet("target-columns");\nconst targetColumnsCols = Object.keys(targetColumns[0]);\ntargetColumnsSheet.name("target-columns");\ntargetColumnsSheet.cell("A1").value([targetColumnsCols]);\n\nconst targetColumnsValues = targetColumns.map(option =>\n  targetColumnsCols.map(c => option[c])\n);\n\nif (targetOptionSets.length == 0) {\n  targetOptionSets.push({ option_set: "", value: "", name: "" });\n}\n\ntargetColumnsSheet.cell("A2").value(targetColumnsValues);\n\nconst targetOptionsSheet = workbook.addSheet("target-optionsets");\n\nconst targetOptionsSetCols = Object.keys(targetOptionSets[0]);\ntargetColumnsSheet.cell("A1").value([targetColumnsCols]);\n\ntargetColumnsSheet.cell("H1").value([["accepted_values", "labels"]]);\n\ntargetColumns.map((col, index) => {\n  const rowIndex = index + 2;\n  targetColumnsSheet\n    .cell("H" + rowIndex)\n    .formula(\n      "ArrayFormula(TEXTJOIN(\\", \\",TRUE,IF(\'target-optionsets\'!$A$2:$B$5000=F" +\n        rowIndex +\n        ",\'target-optionsets\'!$B$2:$B$5000,\\"\\")))"\n    );\n  targetColumnsSheet\n    .cell("I" + rowIndex)\n    .formula(\n      "ArrayFormula(TEXTJOIN(\\", \\",TRUE,IF(\'target-optionsets\'!$A$2:$B$5000=F" +\n        rowIndex +\n        ",\'target-optionsets\'!$C$2:$C$5000,\\"\\")))"\n    );\n});\n\nconst targetOptionsSetValues = targetOptionSets.map(option =>\n  targetOptionsSetCols.map(c => option[c])\n);\n\ntargetOptionsSheet.cell("A1").value([targetOptionsSetCols]);\ntargetOptionsSheet.cell("A2").value(targetOptionsSetValues);\n\nXlsxPopulate.openAsBlob(workbook, "mappings-" + programId + ".xlsx");\n\nreturn "the xls works in google sheet but NOT in open office";\n\n'}];var N=t(4);const R=Object(l.a)((e=>({search:{width:280,margin:10,paddingLeft:10},card:{minWidth:275,maxWidth:300,minHeight:150,maxHeight:250,margin:"10px"},bullet:{display:"inline-block",margin:"0 2px",transform:"scale(0.8)"},title:{fontSize:18},pos:{marginBottom:12},fab:{position:"fixed",zIndex:10,bottom:e.spacing(4),right:e.spacing(4),backgroundColor:"red",color:"white"}})));var B=e=>{const{dhis2:n,onNewRecipe:t,history:i,freshRecipe:r}=e,s=R(),[l,d]=Object(a.useState)(""),[c,u]=Object(a.useState)(void 0),h=Object(o.useQuery)("loadRecipes",(async()=>{const e=await(async(e,n)=>{const t=[],a=await e.api();try{const e=await a.get("/dataStore/taskr");for(let n of e){const e=await a.get("/dataStore/taskr/"+n);e.local=!0,t.push(e)}}catch(i){console.log(i)}return 0===t.length&&t.push(n()),t})(n,r);return e}),{onSuccess:e=>{u(e.concat(T.sort(((e,n)=>e.name>n.name))))},onError:e=>{console.log(e)}}),f=h.isLoading||h.isFetching||h.isRefetching;return Object(N.jsxs)(N.Fragment,{children:[f&&Object(N.jsx)("span",{children:"Loading..."}),c&&Object(N.jsxs)("div",{children:[Object(N.jsxs)(g.a,{className:s.search,children:[Object(N.jsx)(w.a,{type:"submit",className:s.iconButton,"aria-label":"search",children:Object(N.jsx)(E.a,{})}),Object(N.jsx)(S.a,{className:s.input,placeholder:"Search",inputProps:{"aria-label":"search"},onChange:e=>{const{value:n}=e.target;d(n)},value:l})]}),Object(N.jsx)(k.a,{className:s.fab+" no-print",onClick:()=>t(i),children:Object(N.jsx)(I.a,{})}),Object(N.jsx)(O.a,{display:"flex",width:"100%",justifyContent:"space-between",flexWrap:"wrap",alignItems:"flex-center",alignContent:"space-around",children:c.filter((e=>e.name.toLowerCase().includes(l.toLowerCase()))).map((e=>Object(N.jsxs)(b.a,{className:s.card,style:{flex:"10 10 20%",alignSelf:"stretch",alignContent:"stretch",backgroundColor:e.local?"white":"rgb(227 231 239)"},children:[Object(N.jsx)(j.a,{children:Object(N.jsx)(p.a,{className:s.title,gutterBottom:!0,children:e.name})}),Object(N.jsxs)(v.a,{children:[Object(N.jsxs)(m.a,{size:"small",href:"#/recipes/"+e.id+"/run",color:"primary",children:[Object(N.jsx)(C.a,{}),"Show"]}),Object(N.jsx)("span",{style:{width:"300px"}}),Object(N.jsx)(m.a,{size:"small",href:"#/recipes/"+e.id,children:"Edit"})]})]},e.id)))})]})]})},P=t(35);const q="[id,name,ancestors[id,name],organisationUnitGroups[id,name,code]]";var U=class{constructor(e){const n=e||{};this.url=n.url||Object({NODE_ENV:"production",PUBLIC_URL:".",WDS_SOCKET_HOST:void 0,WDS_SOCKET_PATH:void 0,WDS_SOCKET_PORT:void 0,FAST_REFRESH:!0}).REACT_APP_DHIS2_URL,this.user=n.user||Object({NODE_ENV:"production",PUBLIC_URL:".",WDS_SOCKET_HOST:void 0,WDS_SOCKET_PATH:void 0,WDS_SOCKET_PORT:void 0,FAST_REFRESH:!0}).REACT_APP_USER,this.password=n.password||Object({NODE_ENV:"production",PUBLIC_URL:".",WDS_SOCKET_HOST:void 0,WDS_SOCKET_PATH:void 0,WDS_SOCKET_PORT:void 0,FAST_REFRESH:!0}).REACT_APP_PASSWORD,this.contractGroupId=n.contractGroupId||Object({NODE_ENV:"production",PUBLIC_URL:".",WDS_SOCKET_HOST:void 0,WDS_SOCKET_PATH:void 0,WDS_SOCKET_PORT:void 0,FAST_REFRESH:!0}).REACT_APP_CONTRACT_OU_GROUP,this.cache=[],this.userId="",this.baseUrl="..",this.ignoredStores=[""],this.version="",this.forceHttps=n.forceHttps,n.disableInitialize||(this.initialize=this.initialize())}initialize(){return console.info("Using node env: production"),this.d2=Object(P.getManifest)("./manifest.webapp").then((e=>{let n=e.getBaseUrl();return this.forceHttps&&(n=n.replace("http://","https://")),console.info("Using URL: "+n),this.baseUrl=n,n+"/api"})).catch((e=>this.url)).then((e=>Object(P.init)({baseUrl:e,headers:null}).then((e=>{this.user=e.currentUser,this.userId=e.currentUser.id})))),this}appVersion(){return Object(P.getManifest)("./manifest.webapp").then((e=>e.version))}currentUser(){return Object(P.getInstance)().then((e=>e.currentUser))}systemInfoRaw(){return Object(P.getInstance)().then((e=>e.system.systemInfo))}currentUserRaw(){return Object(P.getInstance)().then((e=>e.Api.getApi().get("/me?fields=:all,organisationUnits"+q+",dataViewOrganisationUnits"+q)))}organisationUnits(e,n){return Object(P.getInstance)().then((t=>t.Api.getApi().get("/organisationUnits?fields="+e+"&pageSize=1000&page="+n)))}api(){return Object(P.getInstance)().then((e=>e.Api.getApi()))}organisationUnitGroups(e){return Object(P.getInstance)().then((n=>n.Api.getApi().get("/organisationUnitGroups?fields="+e+"&paging="+!1)))}findOrganisationUnit(e){return Object(P.getInstance)().then((n=>n.Api.getApi().get("/organisationUnits/"+e)))}dataElements(e){return Object(P.getInstance)().then((n=>n.Api.getApi().get("/dataElements"+e)))}updateOrganisationUnit(e){return Object(P.getInstance)().then((n=>n.Api.getApi().update("/organisationUnits/"+e.id+"?preHeatCache=false",e)))}imgUrl(){return Object(P.getInstance)().then((e=>e.Api.getApi().get("/attributes?filter=name:eq:imgUrl")))}addOrganisationUnitToGroup(e,n){return Object(P.getInstance)().then((t=>t.Api.getApi().post("/organisationUnitGroups/"+n+"/organisationUnits/"+e)))}removeOrganisationUnitToGroup(e,n){return Object(P.getInstance)().then((t=>t.Api.getApi().delete("/organisationUnitGroups/"+n+"/organisationUnits/"+e)))}findOrganisationUnitGroup(e){return Object(P.getInstance)().then((n=>n.Api.getApi().get("/organisationUnitGroups/"+e)))}updateOrganisationUnitGroup(e){return Object(P.getInstance)().then((n=>n.Api.getApi().update("/organisationUnitGroups/"+e.id,e)))}},L=t(209),D=t.n(L),F=t(894),V=t(892),M=t(124),Q=t(210),G=t(305),z=t(308),J=t(864),W=t(411),H=t(235);const Y=/^(\d{4})-(\d{2})-(\d{2}).*$/,K=(e,n)=>{let t=e[n];return"coordinates"==n||"geometry"==n||Array.isArray(t)?"not supported for stats":"object"===typeof(a=t)&&null!==a&&t.id?[t.id,t]:"string"===typeof t&&Y.test(t)?t.slice(0,10):t;var a},X=(e,n)=>{let t={};for(let r of n){const n=K(r,e);let a,i;Array.isArray(n)?(a=n[0],i=n[1]):(a=n,i=n),void 0==t[a]&&(t[a]={value:i,count:0}),t[a].count=t[a].count+1}let a=n.length,i=Object.values(t).map((e=>({value:e.value,count:e.count,percentage:0!=a?parseFloat((e.count/a*100).toFixed(2)):void 0})));return i=H.default.orderBy(i,["count"],["desc"]),i};var $=({columns:e,data:n})=>{const[t,a]=i.a.useState([e[0]]);return Object(N.jsxs)("div",{children:[Object(N.jsx)(G.a,{id:"demo-multiple-name-label",children:"Columns"}),Object(N.jsx)(z.a,{multiple:!0,value:t,onChange:e=>{const{target:{value:n}}=e;a("string"===typeof n?n.split(","):n)},input:Object(N.jsx)(J.a,{label:"Column"}),children:e.map((e=>Object(N.jsx)(W.a,{value:e,children:e},e)))}),Object(N.jsx)("br",{}),Object(N.jsx)("div",{style:{display:"flex",alignItems:"strech",flexWrap:"wrap",justifyContent:"flex-start"},children:t.map((e=>Object(N.jsx)("div",{style:{margin:"3px"},children:Object(N.jsx)(D.a,{data:X(e,n),columns:[{name:"value",options:{filter:!0,customBodyRender:e=>Object(N.jsx)(M.a,{value:e})}},{name:"count",options:{filter:!0,customBodyRender:e=>Object(N.jsx)(M.a,{value:e})}},{name:"percentage"}],title:`Stats for ${e}`})},e)))})]})};const Z=i.a.lazy((()=>Promise.all([t.e(0),t.e(1),t.e(9)]).then(t.bind(null,1160))));function ee({results:e,label:n,position:t}){const[i,r]=Object(a.useState)(1),s=Object(a.useMemo)((()=>{if(!Array.isArray(e))return[];let n=e;e.length>3e4&&(n=e.slice(0,1e4));const t=new Set;n.forEach((e=>{null!==e&&void 0!==e&&Object.keys(e).forEach((e=>t.add(e)))}));return Array.from(t)}),[e]),o=s.includes("coordinates")||s.includes("coordinate")||s.includes("geometry"),l=(n||"Result List").replace(/\s/g,"_")+".csv";return Array.isArray(e)?Object(N.jsxs)("div",{style:{width:"80%",maxWidth:"80%"},children:[Object(N.jsxs)(F.a,{value:i,onChange:(e,n)=>{r(n)},"aria-label":"simple tabs example",children:[Object(N.jsx)(V.a,{label:"Table",value:1}),Object(N.jsx)(V.a,{label:"Map",value:2}),Object(N.jsx)(V.a,{label:"Stats",value:3})]}),3==i&&Object(N.jsx)($,{columns:s,data:e}),2==i&&Object(N.jsx)(a.Suspense,{fallback:Object(N.jsx)("h1",{children:"Loading..."}),children:Object(N.jsx)(Z,{lines:e,position:t,showableMap:o,showLayers:!0})}),1==i&&Object(N.jsx)(D.a,{title:n||"Result List",data:e,columns:s.map((n=>({name:n,options:{filter:"geometry"!=n&&"coordinates"!=n&&e.length<3e4,customBodyRender:e=>Object(N.jsx)(M.a,{value:e})}}))),options:{print:!1,responsive:"scrollFullHeight",selectableRows:"none",downloadOptions:{filename:l,separator:","},rowsPerPageOptions:[1,20,50,100,1e3]}})]}):Object(N.jsx)("div",{children:Object(N.jsx)(Q.a,{children:Object(N.jsx)("pre",{children:Object(N.jsx)(M.a,{value:e})})})})}const ne=t(647).Deserializer;var te=class{static deserialize(e,n={}){return new ne({keyForAttribute:"camelCase",...n}).deserialize(e)}},ae=t(16),ie=t.n(ae),re=t(311),se=t.n(re);se.a.openAsBlob=(e,n)=>{e.outputAsync({type:"blob"}).then((function(e){if(window.navigator&&window.navigator.msSaveOrOpenBlob)window.navigator.msSaveOrOpenBlob(e,n||"out.xlsx");else{var t=window.URL.createObjectURL(e),a=document.createElement("a");document.body.appendChild(a),a.href=t,a.download=n||"out.xlsx",a.click(),window.URL.revokeObjectURL(t),document.body.removeChild(a)}}))};var oe=se.a,le=t(511);async function de(e,n){for(let t=0;t<e.length;t++)await n(e[t],t,e)}var ce=t(415),ue=t(512),pe=t.n(ue);t(838),t(839),t(840),t(841),t(842),t(158);var me=function(){return Object(N.jsxs)("div",{style:{float:"right"},children:[Object(N.jsx)("br",{}),"Help :"," ",Object(N.jsxs)("ul",{children:[Object(N.jsx)("li",{children:Object(N.jsx)("a",{target:"_blank",rel:"noopener noreferrer",href:"https://docs.dhis2.org/master/en/developer/html/dhis2_developer_manual_full.html#webapi_metadata_object_filter",children:"Metadata object filter"})}),Object(N.jsx)("li",{children:Object(N.jsx)("a",{target:"_blank",rel:"noopener noreferrer",href:"https://gist.github.com/mestachs/e56a632a92a84148edda5678939626c5",children:"Some bluesquare recipes"})}),Object(N.jsx)("li",{children:Object(N.jsx)("a",{target:"_blank",rel:"noopener noreferrer",href:"https://lodash.com/docs/4.17.15",children:"lodash"})}),Object(N.jsx)("li",{children:Object(N.jsx)("a",{target:"_blank",rel:"noopener noreferrer",href:"http://turfjs.org/docs/",children:"turf"})}),Object(N.jsx)("li",{children:Object(N.jsx)("a",{target:"_blank",rel:"noopener noreferrer",href:"https://www.papaparse.com/",children:"Papa Parse"})}),Object(N.jsx)("li",{children:Object(N.jsx)("a",{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/dtjohnson/xlsx-populate#usage",children:"xlsx-populate"})})]})]})};let ge=[];const he={1:"1",2:"1",3:"1",4:"2",5:"2",6:"2",7:"3",8:"3",9:"3",10:"4",11:"4",12:"4"},fe={1:[1,2,3,4,5,6],2:[7,8,9,10,11,12]},ye=["Janvier","F\xe9vrier","Mars","Avril","Mai","Juin","Juillet","Ao\xfbt","Septembre","Octobre","Novembre","D\xe9cembre"],be=["January","February","March","April","May","June","July","August","September","October","November","December"];let ve={};const je={1:["1","2","3"],2:["4","5","6"],3:["7","8","9"],4:["10","11","12"]};let Oe={};const Se="yearly",we="monthly",xe="quarterly",Ee="sixMonthly",_e="financialJuly",Ce=[Se,we,xe,Ee,_e],Ae="fyJulyQuarter",Ie="quarter",ke="month",Te="monthYear",Ne="sixMonth",Re="eduQuarter",Be=[Ae,Ie,ke,Te,Ne,Re];var Pe=class{static setLocale(e){const n="fr"===e?ye:be;this.setMonthTranslations(n)}static setMonthTranslations(e){ge=e,ve={1:[ge[0],ge[1],ge[2]],2:[ge[3],ge[4],ge[5]],3:[ge[6],ge[7],ge[8]],4:[ge[9],ge[10],ge[11]]},Oe={4:"T1 - "+ge[8]+" - "+ge[11],1:"T2 - "+ge[0]+" - "+ge[2],2:"T3 - "+ge[3]+" - "+ge[5],3:"XX - "+ge[6]+" - "+ge[7]}}static padMonth(e){return e<10?"0"+e:e}static month2quarter(e){return he[e]}static dhis2MonthPeriod(e,n){return e+""+this.padMonth(n)}static dhis2QuarterPeriod(e,n){return e+"Q"+this.month2quarter(n)}static dhis2QuarterPeriodShort(e){return this.month2quarter(e)}static monthsInQuarter(e){let n=""+e,t=je[n];if(void 0===t)throw new Error("Doesn't appear to be a quarter"+n);return t}static monthsNamesInQuarter(e){let n=""+e,t=[];if(t=ve[n],void 0===t)throw new Error("Doesn't appear to be a quarter"+n);return t}static currentQuarter(){let e=new Date;return e.setMonth(e.getMonth()-2),e.getFullYear()+"Q"+this.quarterByMonth(e.getMonth()+1)}static monthName(e){const n=this.split(e,we),t=n[n.length-1].slice(4),a=parseInt(t,0);return ge[a-1]}static monthNameYear(e){const n=this.split(e,we),t=n[n.length-1],a=t.slice(0,4),i=t.slice(4),r=parseInt(i,0);return ge[r-1]+" "+a}static sixMonthlyName(e){const n=this.split(e,"yearly")[0],t=this.split(e,"monthly");return this.monthlyNameFormat(t,n)}static monthlyNameFormat(e,n){return[e[0],e[e.length-1]].map((e=>this.monthName(e))).join(" - ")+" "+n}static displayName(e,n){if(n===Ae)return this.period2FinancialYearJulyQuarterName(e);if(n===Ie)return this.period2QuarterName(e);if(n===ke)return this.monthName(e);if(n===Te)return this.monthNameYear(e);if(n===Ne)return this.sixMonthlyName(e);if(n===Re)return this.eduQuarterName(e);throw new Error("unsupported format '"+n+"' see "+Be.join(","))}static eduQuarterName(e){let n=parseInt(e.slice(0,4),0),t=parseInt(e.slice(5,6),0);t>=1&&t<4&&(n-=1);return n+"-"+(n+1)+" "+Oe[t]}static period2QuarterName(e){const n=this.split(e,Se)[0],t=this.split(e,xe)[0],a=this.split(t,we);return this.monthlyNameFormat(a,n)}static period2FinancialYearJulyQuarterName(e){return this.financialJulyQuarterName(e)+" ("+this.period2QuarterName(e)+")"}static financialJulyQuarterName(e){const n=this.split(e,Se)[0],t=this.split(e,xe)[0];let a=parseInt(n,0),i=parseInt(t.slice(5),0);return i<=2?(a-=1,i+=2):i-=2,"FY "+a+"/"+(a+1)+" Quarter "+i}static formatValues(e){const n=this.split(e,xe)[0],t=this.split(n,we),a=this.detect(e)==we?e:t[0],i=this.split(e,Se)[0];let r,s=parseInt(i,0),o=parseInt(n.slice(5),0),l=s;o<=2?(l=s-1,r=o+2):r=o-2;return{dhis2period:e,financialJulyYear:l,financialJulyYearPlus1:l+1,year:s,quarterNumber:o,financialQuarterNumber:r,monthNumber:parseInt(a.slice(4),0),monthName:this.monthName(a),monthQuarterStart:t[0]?this.monthName(t[0]):"",monthQuarterEnd:t[2]?this.monthName(t[2]):""}}static format(e,n){return this.substituteStr(n,this.formatValues(e))}static substituteStr(e,n){return e.replace(/(\${([^}]+)})/g,(function(e){let t=e.replace(/\${/,"").replace(/}/,"");if(void 0!==n[t])return n[t];throw new Error("unknown placeholder :'"+t+"' only knows "+JSON.stringify(n))}))}static next(e){if(e.includes("Q"))return this.nextQuarter(e);if(e.includes("S"))return this.nextSixMonth(e);if(6===e.length)return this.nextYearMonth(e);if(4===e.length)return this.nextYear(e);if(e.includes("July"))return this.nextFinancialJuly(e);throw new Error("unsupported period format"+e)}static previous(e){if(e.includes("Q"))return this.previousQuarter(e);if(e.includes("S"))return this.previousSixMonth(e);if(6===e.length)return this.previousYearMonth(e);if(4===e.length)return this.previousYear(e);if(e.includes("July"))return this.previousFinancialJuly(e);throw new Error("unsupported period format"+e)}static detect(e){if(e.includes("Q"))return xe;if(e.includes("S"))return Ee;if(6===e.length)return we;if(4===e.length)return Se;if(e.includes("July"))return _e;throw new Error("unsupported period format"+e)}static nextYearMonth(e){let n=parseInt(e.slice(0,4),0),t=parseInt(e.slice(4,6),0);return 12===t?(n+=1,t=1):t+=1,""+n+this.padMonth(t)}static previousYearMonth(e){let n=parseInt(e.slice(0,4),0),t=parseInt(e.slice(4,6),0);return 1===t?(n-=1,t=12):t-=1,""+n+this.padMonth(t)}static nextYear(e){return""+(parseInt(e.slice(0,4),0)+1)}static previousYear(e){return""+(parseInt(e.slice(0,4),0)-1)}static nextFinancialJuly(e){return parseInt(e.slice(0,4),0)+1+"July"}static previousFinancialJuly(e){return parseInt(e.slice(0,4),0)-1+"July"}static nextQuarter(e){let n=parseInt(e.slice(0,4),0),t=parseInt(e.slice(5,6),0);return 4===t?(n+=1,t=1):t<4&&(t+=1),n+"Q"+t}static nextSixMonth(e){let n=parseInt(e.slice(0,4),0),t=parseInt(e.slice(5,6),0);return 2===t?(n+=1,t=1):t<2&&(t+=1),n+"S"+t}static previousQuarter(e){let n=parseInt(e.slice(0,4),0),t=parseInt(e.slice(5,6),0);return 1===t?(n-=1,t=4):t>1&&(t-=1),n+"Q"+t}static previousSixMonth(e){let n=parseInt(e.slice(0,4),0),t=parseInt(e.slice(5,6),0);return 1===t?(n-=1,t=2):t>1&&(t-=1),n+"S"+t}static quarterByMonth(e){let n=0;return e>=1&&e<=3&&(n=1),e>=4&&e<=6&&(n=2),e>=7&&e<=9&&(n=3),e>=10&&e<=12&&(n=4),n}static split(e,n){if(void 0===e)throw new Error("Can't split undefined period into "+n);if(e.includes("Q"))return this.splitYearQuarter(e,n);if(e.includes("S"))return this.splitYearSixMonth(e,n);if(e.includes("July"))return this.splitFinancialJuly(e,n);if(6===e.length)return this.splitYearMonth(e,n);if(4===e.length)return this.splitYear(e,n);throw new Error("don't know how to split "+e+" as '"+n+"' length"+e.length)}static splitFinancialJuly(e,n){let t=parseInt(e.slice(0,4),0);return n===we?[["07",0],["08",0],["09",0],["10",0],["11",0],["12",0],["01",1],["02",1],["03",1],["04",1],["05",1],["06",1]].map((e=>""+(t+e[1])+e[0])):n===xe?[["Q3",0],["Q4",0],["Q1",1],["Q2",1]].map((e=>""+(t+e[1])+e[0])):n===Se?[""+t,""+(t+1)]:n===Ee?[t+"S2",t+1+"S1"]:void this.unsupportedSplitType(e,n)}static splitYear(e,n){let t=parseInt(e.slice(0,4),0);return n===we?["01","02","03","04","05","06","07","08","09","10","11","12"].map((e=>""+t+e)):n===Ee?[t+"S1",t+"S2"]:n===xe?["Q1","Q2","Q3","Q4"].map((e=>""+t+e)):n===Se?[""+t]:n===_e?[t-1+"July",t+"July"]:void this.unsupportedSplitType(e,n)}static splitYearQuarter(e,n){let t=parseInt(e.slice(0,4),0),a=parseInt(e.slice(5,6),0);return n===we?this.monthsInQuarter(a).map((e=>this.dhis2MonthPeriod(t,e))):n===Ee?[a<3?t+"S1":t+"S2"]:n===xe?[e]:n===Se?[""+t]:n===_e?a<3?[t-1+"July"]:[t+"July"]:void this.unsupportedSplitType(e,n)}static splitYearSixMonth(e,n){let t=parseInt(e.slice(0,4),0),a=parseInt(e.slice(5,6),0);return n===we?fe[a].map((e=>this.dhis2MonthPeriod(t,e))):n===Ee?[e]:n===xe?1===a?[t+"Q1",t+"Q2"]:[t+"Q3",t+"Q4"]:n===Se?[""+t]:n===_e?1==a?[t-1+"July"]:[t+"July"]:void this.unsupportedSplitType(e,n)}static splitYearMonth(e,n){let t=parseInt(e.slice(0,4),0),a=parseInt(e.slice(4,6),0);if(n===we)return[e];if(n===xe){return[t+"Q"+this.month2quarter(a)]}return n===Ee?a<7?[t+"S1"]:[t+"S2"]:n===Se?[""+t]:n===_e?a<7?[t-1+"July"]:[t+"July"]:void this.unsupportedSplitType(e,n)}static monthlyPeriods(e,n){return this.monthsInQuarter(n).map((n=>this.dhis2MonthPeriod(e,n)))}static unsupportedSplitType(e,n){throw new Error("Don't know how to split : "+e+", unknown splitType "+n+" only knows "+Ce.join(", "))}static previousPeriods(e,n){for(var t="",a=[],i=0;i<n;i++)i>0&&(e=a[i-1]),t=this.previous(e),a.push(t);return a.reverse()}static nextPeriods(e,n){for(var t="",a=[],i=0;i<n;i++)i>0&&(e=a[i-1]),t=this.next(e),a.push(t);return a}},qe=t(408),Ue=t(891),Le=t(513),De=t.n(Le),Fe=t(514),Ve=t.n(Fe),Me=t(515),Qe=t.n(Me),Ge=t(304),ze=t(896),Je=t(318),We=t.n(Je);const He=e=>{const{dhis2:n,resourceName:t,style:a,name:r,label:s,onChange:o,filter:l,defaultValue:d}=e,[c,u]=i.a.useState(d),[p,m]=i.a.useState([]),[g,h]=i.a.useState([]),f=e=>{u(e.target.value)},y=i.a.useMemo((()=>We()(((e,a)=>{n.api().then((n=>{const a=["name:ilike:"+e.input];return l&&a.push(l),n.get(t,{filter:a,fields:"id,name"})})).then((e=>(m(e[t]),e[t])))}),200)),[]);i.a.useEffect((()=>{console.log("defaultValue",d,c),u(d)}),[u]),i.a.useEffect((()=>{let e=!0;if(""!==c)return y({input:c},(n=>{e&&m(n||[])})),()=>{e=!1};m([])}),[c,y]);return Object(N.jsx)(ze.a,{style:a,getOptionLabel:e=>"string"===typeof e?e:e.name,filterOptions:e=>e,options:p,onChange:(e,n)=>{o(r,n,t),h(n)},autoComplete:!0,includeInputInList:!0,freeSolo:!0,searchText:d,defaultValue:d,renderInput:e=>Object(N.jsx)(ce.a,{...e,name:r,label:s||"Search for "+t,fullWidth:!0,onChange:f,value:c}),renderOption:e=>Object(N.jsx)("span",{name:r,children:e.name})})};var Ye=e=>{const n={};e.params.forEach((e=>n[e.id]=e.default)),Object(a.useEffect)((()=>{e.onParametersChange(n)}),[]);const[t,i]=Object(a.useState)(n),r=n=>{const{name:a,value:r}=n.target,s={...t,[a]:r};i(s),e.onParametersChange(s)};function s(n){const a=n.target.name,r=n.target.files||[];if(!r.length)return;const s=r[0];oe.fromDataAsync(s).then((function(n){const r={...t,[a]:n};i(r),e.onParametersChange(r)}))}function o(n){const a=n.target.name,r=n.target.files||[];var s=new FileReader;if(!r.length)return;const o=r[0];s.onload=function(n){var r=JSON.parse(n.target.result);const s={...t,[a]:r};i(s),e.onParametersChange(s)},s.readAsText(o)}function l(n){if(!(n.target.files||[]).length)return;var a=n.target.files[0];const r=n.target.name;Qe.a.parse(a,{header:!0,dynamicTyping:!0,complete:function(n){const a={...t,[r]:n};i(a),e.onParametersChange(a)}})}const d=(n,a)=>{const r={...t,[n]:a};i(r),e.onParametersChange(r)},c={marginBottom:"10px",width:400};return Object(N.jsxs)(N.Fragment,{children:[Object(N.jsx)("h3",{children:"Parameters"}),e.params.map((n=>{const a=n.id,i=n,u=n.label||a;return Object(N.jsxs)("div",{children:["select"==i.type&&Object(N.jsxs)(Ge.a,{children:[Object(N.jsx)(G.a,{style:{marginLeft:"10px"},children:u}),Object(N.jsx)(z.a,{name:a,value:t[a],onChange:r,style:c,helperText:i.helperText,children:i.choices.map((([e,n])=>Object(N.jsx)(W.a,{value:e,children:n},e)))})]}),"text"==i.type&&Object(N.jsx)(ce.a,{width:200,name:a,label:u,value:t[a],onChange:r,style:c,helperText:i.helperText}),"xlsx"==i.type&&Object(N.jsxs)(N.Fragment,{children:[Object(N.jsx)(G.a,{style:{marginLeft:"10px"},children:u}),Object(N.jsx)("input",{type:"file",name:a,onChange:s,accept:".xlsx",style:c,helperText:i.helperText}),Object(N.jsx)("p",{children:i.helperText})]}),"csv"==i.type&&Object(N.jsxs)(N.Fragment,{children:[Object(N.jsx)(G.a,{style:{marginLeft:"10px"},children:u}),Object(N.jsx)("input",{type:"file",name:a,onChange:l,accept:".csv",style:c}),Object(N.jsx)(p.a,{children:i.helperText})]}),"json"==i.type&&Object(N.jsxs)(N.Fragment,{children:[Object(N.jsx)(G.a,{style:{marginLeft:"10px"},children:u}),Object(N.jsx)("input",{type:"file",name:a,onChange:o,accept:".json",style:c}),Object(N.jsx)(p.a,{children:i.helperText})]}),"dhis2"==i.type&&Object(N.jsx)(He,{style:c,dhis2:e.dhis2,resourceName:i.resourceName,filter:i.filter,defaultValue:i.default,name:a,label:u,onChange:d}),Object(N.jsx)("br",{})]})}))]})},Ke=t(884),Xe=t(886),$e=t(887);var Ze=e=>{const[n,t]=Object(a.useState)(!1),{dhis2:i,recipe:r}=e,s=Object(o.useQuery)("verifyRecipe",(async()=>{const e=await i.api();await e.get("/dataStore/taskr/"+r.id)}),{retry:!1}),l=null===s||void 0===s?void 0:s.isSuccess,d=Object(o.useMutation)((async()=>{H.default.downloadFile({data:JSON.stringify(r),fileName:`recipe-${r.id}.json`,fileType:"text/json"});const e=await i.api();await e.delete("/dataStore/taskr/"+r.id,r)}),{onSuccess:e=>{window.location.replace("/#/recipes"),window.location.reload()},onError:e=>{alert("There was a problem")}});return Object(N.jsxs)("span",{style:{marginRight:"10rem",float:"right"},children:[Object(N.jsx)(m.a,{onClick:()=>t(!0),variant:"contained",color:"secondary",disabled:!l||r.local,children:"Delete"}),Object(N.jsxs)(Ke.a,{open:n,onClose:()=>t(!1),"aria-labelledby":"confirm-dialog",children:[Object(N.jsx)($e.a,{children:'"Are you sure that you want to delete this recipe? A JSON file will be automatically downloaded as a back-up."'}),Object(N.jsxs)(Xe.a,{children:[Object(N.jsx)(m.a,{variant:"contained",onClick:()=>t(!1),color:"primary",children:"Cancel"}),Object(N.jsx)(m.a,{variant:"contained",onClick:()=>{t(!1),d.mutate()},color:"primary",children:"Continue"})]})]})]})};const en=i.a.lazy((()=>Promise.all([t.e(0),t.e(1),t.e(5),t.e(8)]).then(t.bind(null,1721)))),nn=[-12.9487,9.0131],tn=Object.getPrototypeOf((async function(){})).constructor;let an;le.a.register({onBeforeRequest(e,n){an&&an([e.url,e.method,"running"])},onRequestSuccess(e,n,t){an&&an([n.url,n.method,"success",e.status])},onRequestFailure(e,n,t){an&&an([n.url,n.method,"failed",e.status])}});class rn{constructor(){this.registeredCount=0,this.datasets={}}register(e,n){return this.datasets[e]=n,this.registeredCount+=1,this}reset(e){for(var n in this.datasets)delete this.datasets[n];this.registeredCount=0,"run"==e&&this.reRun&&this.reRun(),"clear"==e&&this.clearResults&&this.clearResults()}asVars(){return this.datasets}}var sn=function({recipe:e,dhis2:n,onSave:i,editable:r,autorun:s}){const[o,l]=Object(a.useState)(e.editable),[d,c]=Object(a.useState)(new rn);o&&0==r&&l(!1);const[u,p]=Object(a.useState)(400),[g,h]=Object(a.useState)("80%"),[f,y]=Object(a.useState)(!1),[b,v]=Object(a.useState)("code"),[j,O]=Object(a.useState)(e.name),[S,w]=Object(a.useState)(e.code),[x,E]=Object(a.useState)(e.report||""),[_,A]=Object(a.useState)(void 0),[I,k]=Object(a.useState)([]),[T,R]=Object(a.useState)({}),[B,P]=Object(a.useState)(e.params?JSON.stringify(e.params,null,4):"[]"),[q,U]=Object(a.useState)(e.params);an=k;const[L,D]=Object(a.useState)("");async function F(e){D(void 0),A(void 0);try{const a=De.a.format(e,{parser:"babel",plugins:[Ve.a]});w(a);const i=a.includes("return ")?a:"return "+a,r=[{identifier:"dhis2",entryPoint:async()=>n},{identifier:"asyncForEach",entryPoint:async()=>de},{identifier:"_",entryPoint:async()=>(await Promise.resolve().then(t.bind(null,235))).default},{identifier:"turf",entryPoint:async()=>(await Promise.all([t.e(0),t.e(10)]).then(t.bind(null,1738))).default},{identifier:"Fuse",entryPoint:async()=>(await t.e(11).then(t.t.bind(null,1739,7))).default},{identifier:"PapaParse",entryPoint:async()=>Promise.resolve().then(t.t.bind(null,515,7))},{identifier:"XlsxPopulate",entryPoint:async()=>oe},{identifier:"DatePeriods",entryPoint:async()=>Pe},{identifier:"parameters",entryPoint:async()=>T},{identifier:"report",entryPoint:async()=>d},{identifier:"JSONApi",entryPoint:async()=>te}],s=[];for(let e of r.map((e=>e.entryPoint)))s.push(await e());const o=await new tn(...r.map((e=>e.identifier)),i)(...s);A(o)}catch(a){A(void 0),D(a.message+": line"+(a.lineNumber-3)+(a.columnNumber?":"+a.columnNumber:""))}}const V=()=>{F(S)},M=()=>{A(""),c(new rn)};Object(a.useEffect)((()=>{d.reRun=V,d.clearResults=M,s&&!1===f&&(F(S),y(!0))}),[s,S,F,f,y,V]);const Q=e.code!==S||j!==e.name||e.report!==x||!ie.a.isEqual(e.params,q),J={marginLeft:"20px"};let H=S;return"code"==b?H=S:"parameters"==b?H=B||"":"report"==b&&(H=x),Object(N.jsxs)("div",{children:[Object(N.jsxs)("div",{className:"no-print",children:[r&&Object(N.jsx)(me,{}),r&&Object(N.jsx)(ce.a,{id:"standard-name",label:"Name",value:j,style:{width:"400px"},onChange:e=>{O(e.target.value)},margin:"normal"}),0==r&&Object(N.jsx)("h2",{children:e.name}),Object(N.jsx)("div",{style:{color:"red"},children:L}),Object(N.jsx)("br",{}),r&&e&&o&&Object(N.jsxs)(N.Fragment,{children:[Object(N.jsxs)(Ge.a,{children:[Object(N.jsx)(G.a,{children:"Edit"}),Object(N.jsx)(z.a,{onChange:(e,n)=>{v(n.props.value)},value:b,children:["code","parameters","report"].map((e=>Object(N.jsx)(W.a,{value:e,children:e})))})]}),Object(N.jsx)(pe.a,{readOnly:e&&!1===e.editable,name:"script",fontSize:18,width:g,height:u,mode:"javascript",theme:"monokai",value:H,debounceChangePeriod:3,enableBasicAutocompletion:!0,enableSnippets:!0,onChange:e=>{"code"==b?w(e):"parameters"==b?(e=>{P(e);try{U(JSON.parse(e))}catch(L){D(L.message+" "+e)}})(e):"report"==b&&E(e)},commands:[{name:"Run",bindKey:{win:"Ctrl-r",mac:"Command-r"},exec:e=>{F(e.getValue())}},{name:"Toggle Fullscreen",bindKey:"F11",exec:e=>{const n=document.body.classList.contains("fullScreen");document.body.classList.toggle("fullScreen"),e.container.classList.toggle("fullScreen"),e.setAutoScrollEditorIntoView(!n),n?(p(400),h("80%")):(p("100vh"),h("100%")),e.resize()}}]})]}),void 0!==q&&q!==[]&&q!=={}&&Object(N.jsxs)(N.Fragment,{children:[Object(N.jsx)(Ye,{params:q,onParametersChange:R,dhis2:n}),Object(N.jsx)("br",{})]}),Object(N.jsxs)(m.a,{onClick:e=>{F(S)},title:"ctrl-r to run from the editor",style:J,children:[Object(N.jsx)(C.a,{}),"Run"]}),Object(N.jsx)(m.a,{onClick:()=>window.print(),children:"Print"}),r&&Object(N.jsxs)(N.Fragment,{children:[Object(N.jsx)(m.a,{style:J,onClick:e=>{M()},children:"Clear"}),Object(N.jsx)(m.a,{style:J,variant:"contained",onClick:async function(){const n={id:e.id,name:j,code:S,editable:!0,params:q,report:x};i.mutate({modifiedRecipe:n})},disabled:!Q,children:"Save"})," ",Object(N.jsx)(qe.a,{control:Object(N.jsx)(Ue.a,{value:o}),label:"Hide editor",onChange:()=>l(!o)})]}),Object(N.jsx)("span",{children:I&&I.length>1&&Object(N.jsxs)(N.Fragment,{children:[Object(N.jsx)("a",{href:I[0],target:"_blank",rel:"noopener noreferrer",children:decodeURIComponent(I[0])}),"     ",I.slice(1).join(" | ")]})}),r&&Object(N.jsx)(Ze,{dhis2:n,recipe:e})]}),Object(N.jsx)("br",{}),Object(N.jsx)("br",{}),Object(N.jsx)(ee,{results:_,label:j||"",position:nn},j||""),void 0!=x&&""!==x.trim()&&Object(N.jsx)(a.Suspense,{fallback:Object(N.jsx)("div",{children:"Loading..."}),children:Object(N.jsx)(en,{markup:x,dataSets:d},d.registeredCount)})]})},on=t(882),ln=t(307),dn=t.n(ln),cn=t(895);var un=e=>{const{message:n,isError:t}=e,[i,r]=Object(a.useState)(!1),s=t?"error":"success";return Object(a.useEffect)((()=>{r(void 0!==n)}),[n]),Object(N.jsx)(N.Fragment,{children:Object(N.jsx)(on.a,{in:i,children:Object(N.jsx)(cn.a,{severity:s,action:Object(N.jsx)(w.a,{"aria-label":"close",color:"inherit",size:"small",onClick:()=>{r(!1)},children:Object(N.jsx)(dn.a,{fontSize:"inherit"})}),sx:{mb:2},children:n})})})};const pn={"\xe0":"00E0","\xc0":"00C0","\xe7":"00E7","\xe9":"00E9","\xc9":"00C9","\xe8":"00E8","\xc8":"00C8","\xea":"00EA","\xca":"00CA","\xeb":"00EB","\xcb":"00CB","\xf4":"00F4","\u0153":"009C","\xf9":"00F9","\xfa":"00FA"};var mn=e=>{const{match:n,editable:t,dhis2:i,freshRecipe:r}=e,s="true"===new URLSearchParams(Object(f.g)().search).get("autorun"),l=n.params.recipeId,d=Object(o.useQueryClient)(),[c,u]=Object(a.useState)(void 0),p=Object(o.useMutation)((async({modifiedRecipe:e})=>{const n=await i.api(),t=await n.get("system/info");"2.30"!==t.version&&"2.29"!==t.version&&"2.28"!==t.version||(e.code=(e=>{for(let n of Object.keys(pn))e=e.split(n).join("\\u"+pn[n]);return e})(e.code));try{await n.post("/dataStore/taskr/"+e.id,e);delete e.fresh}catch(a){}await n.update("/dataStore/taskr/"+e.id,e)}),{onSuccess:()=>{d.invalidateQueries("loadRecipes"),d.invalidateQueries("fetchRecipe"),u(void 0)},onError:e=>{console.log(e),u("The recipe couldn't be saved : "+e.message)}}),m=null===p||void 0===p?void 0:p.isError,g=Object(o.useQuery)(["fetchRecipe",l],(async()=>{const e=await i.api();try{return await e.get("/dataStore/taskr/"+l)}catch(n){return T.find((e=>e.id===l))||r(l)}}));return Object(N.jsxs)("div",{children:[Object(N.jsx)("br",{}),Object(N.jsx)(un,{message:c,isError:m}),g.data&&Object(N.jsx)(sn,{recipe:g.data,dhis2:i,onSave:p,editable:t,autorun:s},g.data.id)]})};var gn=e=>{const{match:n,editable:t,dhis2:i,freshRecipe:r}=e,s="true"===new URLSearchParams(Object(f.g)().search).get("autorun"),l=n.params.recipeId,d=Object(o.useQueryClient)(),[c,u]=Object(a.useState)(void 0),p=Object(o.useMutation)((async({modifiedRecipe:e})=>{}),{onSuccess:()=>{d.invalidateQueries("loadRecipes"),d.invalidateQueries("fetchRecipe"),u(void 0)},onError:e=>{console.log(e),u("The recipe couldn't be saved : "+e.message)}}),m=null===p||void 0===p?void 0:p.isError,g=Object(o.useQuery)(["fetchRecipe",l],(async()=>{const e=n.params.gistId,a=await fetch(`https://api.github.com/gists/${e}`).then((e=>e.json()));return{id:e,name:a.description,editable:t,code:a.files["recipe.js"].content,params:a.files["params.json"]?JSON.parse(a.files["params.json"].content):[],report:a.files["report.md"]?a.files["report.md"].content:"",gist:a}}));return Object(N.jsxs)("div",{children:[Object(N.jsx)(un,{message:c,isError:m}),g.data&&Object(N.jsxs)(N.Fragment,{children:[Object(N.jsx)("a",{href:g.data.gist.html_url,children:g.data.name}),Object(N.jsx)(sn,{recipe:g.data,dhis2:{},onSave:p,editable:t,autorun:s},g.data.id)]})]})},hn=t(68),fn=t(859),yn=t(860),bn=t(889),vn=t(410),jn=t(519),On=t.n(jn),Sn=t(520),wn=t.n(Sn),xn=t(518),En=t.n(xn),_n=t(517),Cn=t.n(_n);const An=Object(l.a)((e=>({drawerHeader:{display:"flex",alignItems:"center",justifyContent:"flex-end",padding:"8px 8px"}})));var In=()=>{const e=An(),[n,t]=Object(a.useState)(!1),i=(e,n)=>a=>{("keydown"!==a.type||"Tab"!==a.key&&"Shift"!==a.key)&&(n&&(window.location=n),t(e))};return Object(N.jsxs)(N.Fragment,{children:[Object(N.jsx)(w.a,{edge:"start",color:"inherit","aria-label":"menu",onClick:i(!0),children:Object(N.jsx)(Cn.a,{})}),Object(N.jsxs)(hn.a,{variant:"persistent",anchor:"left",open:n,onClose:i(!1),children:[Object(N.jsx)("div",{className:e.drawerHeader,children:Object(N.jsx)(w.a,{onClick:i(!1),children:Object(N.jsx)(En.a,{})})}),Object(N.jsxs)(fn.a,{children:[Object(N.jsx)(yn.a,{onClick:i(!1,"#/recipes/"),disablePadding:!0,children:Object(N.jsxs)(w.a,{children:[Object(N.jsx)(bn.a,{children:Object(N.jsx)(On.a,{})}),Object(N.jsx)(vn.a,{primary:"Recipes"})]})},"allRecipes"),Object(N.jsx)(yn.a,{onClick:i(!1,"/"),disablePadding:!0,children:Object(N.jsxs)(w.a,{children:[Object(N.jsx)(bn.a,{children:Object(N.jsx)(wn.a,{})}),Object(N.jsx)(vn.a,{primary:"Return to DHIS2"})]})},"dhis2")]})]})]})};const kn=i.a.lazy((()=>Promise.all([t.e(6),t.e(7)]).then(t.bind(null,1720)))),Tn=Object(l.a)((e=>({root:{width:"100%",margin:"auto",backgroundColor:"#eeeeee"},paper:{paddingBottom:"100%",paddingLeft:"20px",backgroundColor:"#eeeeee"},drawerHeader:{display:"flex",alignItems:"center",justifyContent:"flex-end",padding:"8px 8px"}})));function Nn(e){return{id:e||Object(y.generateUid)(),name:"New - ",code:'\n    // press crtl-r to run\n    const api = await dhis2.api();\n    const ou = await api.get("organisationUnits", {\n    fields: "id,name",\n    paging: false\n    });\n    return ou.organisationUnits\n    ',editable:!0,fresh:!0}}const Rn=new U,Bn=new o.QueryClient({defaultOptions:{queries:{retry:!1,refetchOnWindowFocus:!1}}});var Pn=function(){const e=Tn();function n(e){const n=Nn();e.push("/recipes/"+n.id)}return Object(N.jsx)(h.a,{children:Object(N.jsx)(o.QueryClientProvider,{client:Bn,children:Object(N.jsxs)("div",{className:e.root+" reportPage",children:[Object(N.jsx)(d.a,{position:"static",color:"primary",className:"no-print",children:Object(N.jsx)(c.a,{children:Object(N.jsxs)(u.a,{container:!0,justify:"space-between",alignItems:"center",alignContent:"center",children:[Object(N.jsx)(u.a,{item:!0,children:Object(N.jsx)(In,{classes:e})}),Object(N.jsx)(u.a,{item:!0,children:Object(N.jsx)(p.a,{variant:"h6",color:"inherit",children:"Taskr : your task runner."})}),Object(N.jsx)(u.a,{item:!0,children:Object(N.jsx)(m.a,{href:"#/doc/",color:"inherit",children:"Documentation"})})]})})}),Object(N.jsx)(g.a,{className:e.paper,children:Object(N.jsxs)(f.d,{children:[Object(N.jsx)(f.b,{path:"/doc",exact:!0,render:e=>Object(N.jsx)(a.Suspense,{fallback:Object(N.jsx)("div",{children:"Loading..."}),children:Object(N.jsx)(kn,{match:e.match})})}),Object(N.jsx)(f.b,{path:"/doc/:section",render:e=>Object(N.jsx)(a.Suspense,{fallback:Object(N.jsx)("div",{children:"Loading..."}),children:Object(N.jsx)(kn,{match:e.match})})}),Object(N.jsx)(f.b,{path:"/recipes",exact:!0,render:t=>Object(N.jsx)(B,{dhis2:Rn,freshRecipe:Nn,classes:e,history:t.history,onNewRecipe:n,match:t.match})}),Object(N.jsx)(f.b,{path:"/recipes/:recipeId",exact:!0,render:n=>Object(N.jsx)(mn,{dhis2:Rn,classes:e,freshRecipe:Nn,match:n.match,history:n.history,editable:!0})}),Object(N.jsx)(f.b,{path:"/recipes/:recipeId/run",render:n=>Object(N.jsx)(mn,{dhis2:Rn,classes:e,freshRecipe:Nn,match:n.match,history:n.history,editable:!1})}),Object(N.jsx)(f.b,{path:"/gh/g/:repo/:gistId",exact:!0,render:n=>Object(N.jsx)(gn,{dhis2:Rn,classes:e,freshRecipe:Nn,match:n.match,history:n.history,editable:!0})}),Object(N.jsx)(f.b,{path:"/gh/g/:repo/:gistId/run",exact:!0,render:n=>Object(N.jsx)(gn,{dhis2:Rn,classes:e,freshRecipe:Nn,match:n.match,history:n.history,editable:!1})}),Object(N.jsx)(f.a,{to:"/recipes"})]})})]})})})};Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));s.a.render(Object(N.jsx)(Pn,{}),document.getElementById("root")),"serviceWorker"in navigator&&navigator.serviceWorker.ready.then((e=>{e.unregister()}))}},[[848,3,4]]]);
//# sourceMappingURL=main.d4d41395.chunk.js.map