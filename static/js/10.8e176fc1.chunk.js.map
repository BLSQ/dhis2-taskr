{"version":3,"sources":["support/turf.js"],"names":["turf","line","geometry","latlong","coordinate","latitude","longitude","coordinates","JSON","parse","ignored","properties","point","bbox","pt","oldPointsWithinPolygon","points","polygon","pointsInBbox","features","filter"],"mappings":"0HAAA,qBAEAA,aAAmBC,IACjB,IAAIC,EAAWD,EAAKC,SACpB,IACE,MAAMC,EACJF,EAAKG,YAAcH,EAAKG,WAAWC,UAAYJ,EAAKG,WAAWE,UAC3D,CAACL,EAAKG,WAAWC,SAAUJ,EAAKG,WAAWE,WAC3CL,EAAKM,YACLC,KAAKC,MAAMR,EAAKM,aAChBN,EAAKC,UAAYD,EAAKC,SAASK,YACrCL,EAAWF,QAAWG,GACtB,MAAOO,GACP,IACER,EAAWF,UAAaQ,KAAKC,MAAMR,EAAKM,cACxC,MAAOG,GACP,IACER,EAAWF,eAAkBQ,KAAKC,MAAMR,EAAKM,cAC7C,MAAOG,MASb,OANIR,GACEA,EAASS,aACXT,EAASS,WAAWV,KAAOA,GAG/BA,EAAKC,SAAWA,EACTA,GAGTF,SAAc,CAACY,EAAOC,KACpB,MAAMC,EAAKF,EAAMV,SAASK,YAC1B,OACEM,EAAK,IAAMC,EAAG,IAAMD,EAAK,IAAMC,EAAG,IAAMD,EAAK,IAAMC,EAAG,IAAMD,EAAK,IAAMC,EAAG,IAI9E,MAAMC,EAAyBf,sBAE/BA,sBAA2B,CAACgB,EAAQC,KAClC,MAAMJ,EAAOb,OAAUiB,GACjBC,EAAeF,EAAOG,SAASC,QAAQN,GAAOd,SAAYc,EAAID,KACpE,OAAOE,EAAuBf,oBAAuBkB,GAAeD,IAGvDjB","file":"static/js/10.8e176fc1.chunk.js","sourcesContent":["import * as turf from \"@turf/turf\";\n\nturf.geometrify = (line) => {\n  let geometry = line.geometry;\n  try {\n    const latlong =\n      line.coordinate && line.coordinate.latitude && line.coordinate.longitude\n        ? [line.coordinate.latitude, line.coordinate.longitude]\n        : line.coordinates\n        ? JSON.parse(line.coordinates)\n        : line.geometry && line.geometry.coordinates;\n    geometry = turf.point(latlong);\n  } catch (ignored) {\n    try {\n      geometry = turf.polygon(JSON.parse(line.coordinates));\n    } catch (ignored) {\n      try {\n        geometry = turf.multiPolygon(JSON.parse(line.coordinates));\n      } catch (ignored) {}\n    }\n  }\n  if (geometry) {\n    if (geometry.properties) {\n      geometry.properties.line = line;\n    }\n  }\n  line.geometry = geometry;\n  return geometry;\n};\n\nturf.inBBox = (point, bbox) => {\n  const pt = point.geometry.coordinates;\n  return (\n    bbox[0] <= pt[0] && bbox[1] <= pt[1] && bbox[2] >= pt[0] && bbox[3] >= pt[1]\n  );\n};\n\nconst oldPointsWithinPolygon = turf.pointsWithinPolygon;\n\nturf.pointsWithinPolygon = (points, polygon) => {\n  const bbox = turf.bbox(polygon);\n  const pointsInBbox = points.features.filter((pt) => turf.inBBox(pt, bbox));\n  return oldPointsWithinPolygon(turf.featureCollection(pointsInBbox), polygon);\n};\n\nexport default turf;\n"],"sourceRoot":""}