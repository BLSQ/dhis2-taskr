import fs from "fs"
import DatePeriods from "../src/support/DatePeriods";
import JSONApi from "../src/support/JSONApi";
import XlsxPopulate from "../src/support/XlsxPopulateOpenAsBlob"
import Dhis2 from "../src/support/Dhis2";
import * as turf from "@turf/turf";
import papaparse from 'papaparse'
import DataSets  from "../src/support/DataSets";
import minimist from "minimist"



const AsyncFunction = Object.getPrototypeOf(async function() {}).constructor;

const argv = minimist(process.argv.slice(2));
console.log(argv);


const saveResultsAsCsv = async (results, file) => {
  const headers = Array.from(
    new Set(results.flatMap(item => Object.keys(item)))
  );

  const jsonifiedData = results.map(item => {
    const newItem = {}
    for (const key in item) {
      newItem[key] = item[key];
      if (typeof item[key] === 'object') {
        newItem[key] = JSON.stringify(item[key]);
      }
    }
    
    return newItem;
  });

  const csv = papaparse.unparse({
    fields: headers,
    data: jsonifiedData,
  });
  await Bun.write(file, csv)
  console.log("writing results to ", file)
}

const directory = "./temp"

const startup = async () => {
    const dhis2 = new Dhis2({});


    const api = await  dhis2.api()
    const recipe = await api.get("dataStore/taskr/"+argv["r"])
    console.log(recipe)

    
    const parameters = {}
    const report = new DataSets()


    /*const workbook = await XlsxPopulate.fromFileAsync(process.argv[2])
    console.log(workbook.sheets().map(s => s.name()))*/


    const body = recipe.code.includes("return ")
    ? recipe.code
    : "return " + recipe.code;
  const libs = [
    { identifier: "dhis2", entryPoint: async () => dhis2 },

    {
      identifier: "_",
      entryPoint: async () => {
        const lodash = await import("../src/support/lodash");
        return lodash.default;
      },
    },
    {
      identifier: "turf",
      entryPoint: async () => {
        return turf.default;
      },
    },
    {
      identifier: "Fuse",
      entryPoint: async () => {
        const Fuse = await import("fuse.js");
        return Fuse.default;
      },
    },
   
    { identifier: "XlsxPopulate", entryPoint: async () => XlsxPopulate },
    { identifier: "DatePeriods", entryPoint: async () => DatePeriods },
    { identifier: "parameters", entryPoint: async () => parameters },
    { identifier: "report", entryPoint: async () => report },
    { identifier: "JSONApi", entryPoint: async () => JSONApi },
  ];
  const entryPoints = [];
  for (let entryPoint of libs.map((l) => l.entryPoint)) {
    entryPoints.push(await entryPoint());
  }


  console.log(body)
  const results = await new AsyncFunction(
    ...libs.map((l) => l.identifier),
    body
  )(...entryPoints);

  if (Array.isArray(results)) {
    saveResultsAsCsv(results, directory+"/results.csv")
  }

}
console.log("hello", process.argv)

startup()